ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC_SAR_Seq_1.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ADC_SAR_Seq_1_initVar
  20              		.bss
  21              		.type	ADC_SAR_Seq_1_initVar, %object
  22              		.size	ADC_SAR_Seq_1_initVar, 1
  23              	ADC_SAR_Seq_1_initVar:
  24 0000 00       		.space	1
  25              		.comm	ADC_SAR_Seq_1_offset,4,4
  26              		.comm	ADC_SAR_Seq_1_countsPer10Volt,8,4
  27              		.section	.rodata
  28              		.align	2
  29              		.type	ADC_SAR_Seq_1_channelsConfig, %object
  30              		.size	ADC_SAR_Seq_1_channelsConfig, 8
  31              	ADC_SAR_Seq_1_channelsConfig:
  32 0000 00020000 		.word	512
  33 0004 00000000 		.word	0
  34              		.section	.text.ADC_SAR_Seq_1_Start,"ax",%progbits
  35              		.align	2
  36              		.global	ADC_SAR_Seq_1_Start
  37              		.code	16
  38              		.thumb_func
  39              		.type	ADC_SAR_Seq_1_Start, %function
  40              	ADC_SAR_Seq_1_Start:
  41              	.LFB0:
  42              		.file 1 "Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c"
   1:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * File Name: ADC_SAR_Seq_1.c
   3:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Version 2.50
   4:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   5:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Description:
   6:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Approximation ADC Component Component.
   8:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
   9:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Note:
  10:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  11:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  12:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Copyright 2008-2017, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * the software package with which this file was provided.
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 2


  16:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  18:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #include "ADC_SAR_Seq_1.h"
  19:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  20:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  21:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  22:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global data allocation
  23:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  24:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint8 ADC_SAR_Seq_1_initVar = 0u;
  25:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int16 ADC_SAR_Seq_1_offset[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];
  26:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** volatile int32 ADC_SAR_Seq_1_countsPer10Volt[ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM];   /* Gain compensat
  27:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  28:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  29:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /***************************************
  30:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Local data allocation
  31:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ***************************************/
  32:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /* Channels configuration generated by customiser */
  33:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** static const uint32 CYCODE ADC_SAR_Seq_1_channelsConfig[] = { 0x00000200u, 0x00000000u };
  34:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  35:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  36:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  37:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Start
  38:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  39:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  40:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  41:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Performs all required initialization for this component
  42:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and enables the power. The power will be set to the appropriate
  43:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  power based on the clock frequency.
  44:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  45:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
  46:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  47:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  48:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  49:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  50:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  51:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  52:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_initVar variable is used to indicate when/if initial
  53:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  configuration of this component has happened. The variable is initialized to
  54:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  57:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If re-initialization of the component is required the variable should be set
  58:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  to zero before call of ADC_SAR_Seq_1_Start() routine, or the user may call
  59:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Init() and ADC_SAR_Seq_1_Enable() as done in the
  60:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start() routine.
  61:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  62:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Start(void)
  64:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  43              		.loc 1 64 0
  44              		.cfi_startproc
  45              		@ args = 0, pretend = 0, frame = 0
  46              		@ frame_needed = 1, uses_anonymous_args = 0
  47 0000 80B5     		push	{r7, lr}
  48              		.cfi_def_cfa_offset 8
  49              		.cfi_offset 7, -8
  50              		.cfi_offset 14, -4
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 3


  51 0002 00AF     		add	r7, sp, #0
  52              		.cfi_def_cfa_register 7
  65:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* If not Initialized then initialize all required hardware and software */
  66:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(ADC_SAR_Seq_1_initVar == 0u)
  53              		.loc 1 66 0
  54 0004 064B     		ldr	r3, .L3
  55 0006 1B78     		ldrb	r3, [r3]
  56 0008 002B     		cmp	r3, #0
  57 000a 04D1     		bne	.L2
  67:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
  68:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_Init();
  58              		.loc 1 68 0
  59 000c FFF7FEFF 		bl	ADC_SAR_Seq_1_Init
  69:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_initVar = 1u;
  60              		.loc 1 69 0
  61 0010 034B     		ldr	r3, .L3
  62 0012 0122     		movs	r2, #1
  63 0014 1A70     		strb	r2, [r3]
  64              	.L2:
  70:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
  71:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_Enable();
  65              		.loc 1 71 0
  66 0016 FFF7FEFF 		bl	ADC_SAR_Seq_1_Enable
  72:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
  67              		.loc 1 72 0
  68 001a C046     		nop
  69 001c BD46     		mov	sp, r7
  70              		@ sp needed
  71 001e 80BD     		pop	{r7, pc}
  72              	.L4:
  73              		.align	2
  74              	.L3:
  75 0020 00000000 		.word	ADC_SAR_Seq_1_initVar
  76              		.cfi_endproc
  77              	.LFE0:
  78              		.size	ADC_SAR_Seq_1_Start, .-ADC_SAR_Seq_1_Start
  79              		.global	__aeabi_idiv
  80              		.section	.text.ADC_SAR_Seq_1_Init,"ax",%progbits
  81              		.align	2
  82              		.global	ADC_SAR_Seq_1_Init
  83              		.code	16
  84              		.thumb_func
  85              		.type	ADC_SAR_Seq_1_Init, %function
  86              	ADC_SAR_Seq_1_Init:
  87              	.LFB1:
  73:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  74:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
  75:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
  76:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Init
  77:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
  78:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  79:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
  80:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Initialize component's parameters to the parameters set by user in the
  81:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  customizer of the component placed onto schematic. Usually called in
  82:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Start().
  83:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  84:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 4


  85:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  86:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  87:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
  88:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
  89:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  90:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
  91:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  The ADC_SAR_Seq_1_offset variable is initialized.
  92:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
  93:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
  94:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Init(void)
  95:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
  88              		.loc 1 95 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 16
  91              		@ frame_needed = 1, uses_anonymous_args = 0
  92 0000 80B5     		push	{r7, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 7, -8
  95              		.cfi_offset 14, -4
  96 0002 84B0     		sub	sp, sp, #16
  97              		.cfi_def_cfa_offset 24
  98 0004 00AF     		add	r7, sp, #0
  99              		.cfi_def_cfa_register 7
  96:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 chNum;
  97:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 tmpRegVal;
  98:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 counts;
  99:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 100:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 101:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         static const uint8 CYCODE ADC_SAR_Seq_1_InputsPlacement[] =
 102:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 103:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_0_PIN
 105:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_1_PIN
 107:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u)
 108:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_2_PIN
 110:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 2u */
 111:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u)
 112:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_3_PIN
 114:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 3u */
 115:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u)
 116:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_4_PIN
 118:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 4u */
 119:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u)
 120:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_5_PIN
 122:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 5u */
 123:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u)
 124:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_6_PIN
 126:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 6u */
 127:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u)
 128:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_7_PIN
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 5


 130:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 7u */
 131:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u)
 132:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_8_PIN
 134:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 8u */
 135:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u)
 136:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PORT << 4u) |
 137:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_9_PIN
 138:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 9u */
 139:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u)
 140:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PORT << 4u) |
 141:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_10_PIN
 142:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 10u */
 143:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u)
 144:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PORT << 4u) |
 145:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_11_PIN
 146:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 11u */
 147:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u)
 148:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PORT << 4u) |
 149:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_12_PIN
 150:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 12u */
 151:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u)
 152:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PORT << 4u) |
 153:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_13_PIN
 154:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 13u */
 155:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u)
 156:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PORT << 4u) |
 157:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_14_PIN
 158:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 14u */
 159:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u)
 160:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PORT << 4u) |
 161:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_15_PIN
 162:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 15u */
 163:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u)
 164:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ,(uint8)(ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PORT << 4u) |
 165:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (uint8)ADC_SAR_Seq_1_cy_psoc4_sarmux_8__CH_16_PIN
 166:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 16u */
 167:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         };
 168:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 169:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 170:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_IRQ_REMOVE == 0u)
 171:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Start and set interrupt vector */
 172:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyIntSetPriority(ADC_SAR_Seq_1_INTC_NUMBER, ADC_SAR_Seq_1_INTC_PRIOR_NUMBER);
 100              		.loc 1 172 0
 101 0006 0321     		movs	r1, #3
 102 0008 0E20     		movs	r0, #14
 103 000a FFF7FEFF 		bl	CyIntSetPriority
 173:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (void)CyIntSetVector(ADC_SAR_Seq_1_INTC_NUMBER, &ADC_SAR_Seq_1_ISR);
 104              		.loc 1 173 0
 105 000e 5C4B     		ldr	r3, .L16
 106 0010 1900     		movs	r1, r3
 107 0012 0E20     		movs	r0, #14
 108 0014 FFF7FEFF 		bl	CyIntSetVector
 174:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif   /* End ADC_SAR_Seq_1_IRQ_REMOVE */
 175:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 176:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Init SAR and MUX registers */
 177:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = ADC_SAR_Seq_1_DEFAULT_EN_CHANNELS;
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 6


 109              		.loc 1 177 0
 110 0018 5A4B     		ldr	r3, .L16+4
 111 001a 0322     		movs	r2, #3
 112 001c 1A60     		str	r2, [r3]
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 179:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Enable the SAR internal pump when global pump is enabled */
 180:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         (((ADC_SAR_Seq_1_PUMP_CTRL_REG & ADC_SAR_Seq_1_PUMP_CTRL_ENABLED) != 0u) ? 
 113              		.loc 1 180 0
 114 001e 5A4B     		ldr	r3, .L16+8
 115 0020 1B68     		ldr	r3, [r3]
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 178 0
 117 0022 002B     		cmp	r3, #0
 118 0024 01DA     		bge	.L6
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 119              		.loc 1 178 0 is_stmt 0 discriminator 1
 120 0026 5949     		ldr	r1, .L16+12
 121 0028 00E0     		b	.L7
 122              	.L6:
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 123              		.loc 1 178 0 discriminator 2
 124 002a 5949     		ldr	r1, .L16+16
 125              	.L7:
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_CTRL_REG_CFG | 
 126              		.loc 1 178 0 discriminator 4
 127 002c 594B     		ldr	r3, .L16+20
 128 002e 594A     		ldr	r2, .L16+20
 129 0030 1268     		ldr	r2, [r2]
 130 0032 0A43     		orrs	r2, r1
 131 0034 1A60     		str	r2, [r3]
 181:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_BOOSTPUMP_EN : 0u);
 182:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_CTRL_REG_CFG;
 132              		.loc 1 182 0 is_stmt 1 discriminator 4
 133 0036 584B     		ldr	r3, .L16+24
 134 0038 584A     		ldr	r2, .L16+28
 135 003a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG = ADC_SAR_Seq_1_DEFAULT_RANGE_THRES_REG_CFG;
 136              		.loc 1 183 0 discriminator 4
 137 003c 584B     		ldr	r3, .L16+32
 138 003e 594A     		ldr	r2, .L16+36
 139 0040 1A60     		str	r2, [r3]
 184:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_COND_REG  = ADC_SAR_Seq_1_COMPARE_MODE;
 140              		.loc 1 184 0 discriminator 4
 141 0042 594B     		ldr	r3, .L16+40
 142 0044 0022     		movs	r2, #0
 143 0046 1A60     		str	r2, [r3]
 185:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME01_REG_CFG;
 144              		.loc 1 185 0 discriminator 4
 145 0048 584B     		ldr	r3, .L16+44
 146 004a 594A     		ldr	r2, .L16+48
 147 004c 1A60     		str	r2, [r3]
 186:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_1_DEFAULT_SAMPLE_TIME23_REG_CFG;
 148              		.loc 1 186 0 discriminator 4
 149 004e 594B     		ldr	r3, .L16+52
 150 0050 574A     		ldr	r2, .L16+48
 151 0052 1A60     		str	r2, [r3]
 187:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 7


 188:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 189:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0 != 0u)
 190:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_MUX_SWITCH0_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 191:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 192:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 193:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_1_DEFAULT_MUX_SWITCH0;
 194:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 195:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /*ADC_SAR_Seq_1_CHANNELS_MODE !=0 */
 196:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 197:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = 0u;
 152              		.loc 1 197 0 discriminator 4
 153 0054 584B     		ldr	r3, .L16+56
 154 0056 0022     		movs	r2, #0
 155 0058 1A60     		str	r2, [r3]
 198:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = 0u;
 156              		.loc 1 198 0 discriminator 4
 157 005a 584B     		ldr	r3, .L16+60
 158 005c 0022     		movs	r2, #0
 159 005e 1A60     		str	r2, [r3]
 199:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_INTR_MASK_REG = ADC_SAR_Seq_1_SAR_INTR_MASK;
 160              		.loc 1 199 0 discriminator 4
 161 0060 574B     		ldr	r3, .L16+64
 162 0062 0122     		movs	r2, #1
 163 0064 1A60     		str	r2, [r3]
 200:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 201:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 202:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_ANA_TRIM_REG = ADC_SAR_Seq_1_TRIM_COEF;
 164              		.loc 1 202 0 discriminator 4
 165 0066 574B     		ldr	r3, .L16+68
 166 0068 0222     		movs	r2, #2
 167 006a 1A60     		str	r2, [r3]
 203:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 204:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 205:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Read and modify default configuration based on characterization */
 206:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal = ADC_SAR_Seq_1_SAR_DFT_CTRL_REG;
 168              		.loc 1 206 0 discriminator 4
 169 006c 564B     		ldr	r3, .L16+72
 170 006e 1B68     		ldr	r3, [r3]
 171 0070 7B60     		str	r3, [r7, #4]
 207:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DCEN;
 172              		.loc 1 207 0 discriminator 4
 173 0072 7B68     		ldr	r3, [r7, #4]
 174 0074 554A     		ldr	r2, .L16+76
 175 0076 1340     		ands	r3, r2
 176 0078 7B60     		str	r3, [r7, #4]
 208:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 209:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 210:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_1_MAX_FREQUENCY / 2))
 211:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_SEL_CSEL_DFT_CHAR;
 177              		.loc 1 211 0 discriminator 4
 178 007a 7B68     		ldr	r3, [r7, #4]
 179 007c C022     		movs	r2, #192
 180 007e 9204     		lsls	r2, r2, #18
 181 0080 1343     		orrs	r3, r2
 182 0082 7B60     		str	r3, [r7, #4]
 212:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else  /* clock speed < 9 Mhz */
 213:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 8


 214:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* clock speed > 9 Mhz */
 215:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else
 216:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 217:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****              (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF))
 218:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DLY_INC;
 219:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 220:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_DCEN;
 221:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)~ADC_SAR_Seq_1_DLY_INC;
 222:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ((ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNAL1024) || \
 223:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    (ADC_SAR_Seq_1_DEFAULT_VREF_SEL == ADC_SAR_Seq_1__INTERNALVREF)) */
 224:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER == ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
 225:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     
 226:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_DFT_CTRL_REG = tmpRegVal;
 183              		.loc 1 226 0 discriminator 4
 184 0084 504B     		ldr	r3, .L16+72
 185 0086 7A68     		ldr	r2, [r7, #4]
 186 0088 1A60     		str	r2, [r3]
 227:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 228:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12)
 229:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_WOUNDING_REG = ADC_SAR_Seq_1_ALT_WOUNDING;
 230:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 231:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 232:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM; chNum++)
 187              		.loc 1 232 0 discriminator 4
 188 008a 0023     		movs	r3, #0
 189 008c FB60     		str	r3, [r7, #12]
 190 008e 70E0     		b	.L8
 191              	.L15:
 233:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 234:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         tmpRegVal = (ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_CHANNEL_CONFIG_MASK);
 192              		.loc 1 234 0
 193 0090 4F4B     		ldr	r3, .L16+80
 194 0092 FA68     		ldr	r2, [r7, #12]
 195 0094 9200     		lsls	r2, r2, #2
 196 0096 D258     		ldr	r2, [r2, r3]
 197 0098 DC23     		movs	r3, #220
 198 009a 9B01     		lsls	r3, r3, #6
 199 009c 1340     		ands	r3, r2
 200 009e 7B60     		str	r3, [r7, #4]
 235:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u)
 236:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal |= ADC_SAR_Seq_1_InputsPlacement[chNum];
 201              		.loc 1 236 0
 202 00a0 4C4A     		ldr	r2, .L16+84
 203 00a2 FB68     		ldr	r3, [r7, #12]
 204 00a4 D318     		adds	r3, r2, r3
 205 00a6 1B78     		ldrb	r3, [r3]
 206 00a8 1A00     		movs	r2, r3
 207 00aa 7B68     		ldr	r3, [r7, #4]
 208 00ac 1343     		orrs	r3, r2
 209 00ae 7B60     		str	r3, [r7, #4]
 237:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* End ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM > 1u */
 238:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 239:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 240:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 241:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 242:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         *  (0) and 8-bit (1) resolution.
 243:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         */
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 9


 244:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if((ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12) && \
 245:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             (ADC_SAR_Seq_1_ALT_WOUNDING == ADC_SAR_Seq_1_WOUNDING_10BIT))
 246:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_1_ALT_RESOLUTION_ON);
 247:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_MAX_RESOLUTION != ADC_SAR_Seq_1_RESOLUTION_12 */
 248:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 249:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 250:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(chNum < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 251:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 252:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 253:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 210              		.loc 1 253 0
 211 00b0 FB68     		ldr	r3, [r7, #12]
 212 00b2 9B00     		lsls	r3, r3, #2
 213 00b4 484A     		ldr	r2, .L16+88
 214 00b6 9446     		mov	ip, r2
 215 00b8 6344     		add	r3, r3, ip
 216 00ba 7A68     		ldr	r2, [r7, #4]
 217 00bc 1A60     		str	r2, [r3]
 254:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 255:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 218              		.loc 1 255 0
 219 00be 444B     		ldr	r3, .L16+80
 220 00c0 FA68     		ldr	r2, [r7, #12]
 221 00c2 9200     		lsls	r2, r2, #2
 222 00c4 D358     		ldr	r3, [r2, r3]
 223 00c6 0122     		movs	r2, #1
 224 00c8 1340     		ands	r3, r2
 225 00ca 0AD0     		beq	.L9
 256:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 257:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 226              		.loc 1 257 0
 227 00cc 3A4B     		ldr	r3, .L16+56
 228 00ce 3A4A     		ldr	r2, .L16+56
 229 00d0 1168     		ldr	r1, [r2]
 230 00d2 0120     		movs	r0, #1
 231 00d4 FA68     		ldr	r2, [r7, #12]
 232 00d6 9040     		lsls	r0, r0, r2
 233 00d8 0200     		movs	r2, r0
 234 00da 1204     		lsls	r2, r2, #16
 235 00dc 120C     		lsrs	r2, r2, #16
 236 00de 0A43     		orrs	r2, r1
 237 00e0 1A60     		str	r2, [r3]
 238              	.L9:
 258:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 259:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 260:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0u)
 239              		.loc 1 260 0
 240 00e2 3B4B     		ldr	r3, .L16+80
 241 00e4 FA68     		ldr	r2, [r7, #12]
 242 00e6 9200     		lsls	r2, r2, #2
 243 00e8 D358     		ldr	r3, [r2, r3]
 244 00ea 0222     		movs	r2, #2
 245 00ec 1340     		ands	r3, r2
 246 00ee 0AD0     		beq	.L10
 261:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 262:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 247              		.loc 1 262 0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 10


 248 00f0 324B     		ldr	r3, .L16+60
 249 00f2 324A     		ldr	r2, .L16+60
 250 00f4 1168     		ldr	r1, [r2]
 251 00f6 0120     		movs	r0, #1
 252 00f8 FA68     		ldr	r2, [r7, #12]
 253 00fa 9040     		lsls	r0, r0, r2
 254 00fc 0200     		movs	r2, r0
 255 00fe 1204     		lsls	r2, r2, #16
 256 0100 120C     		lsrs	r2, r2, #16
 257 0102 0A43     		orrs	r2, r1
 258 0104 1A60     		str	r2, [r3]
 259              	.L10:
 263:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 264:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 265:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 266:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             else
 267:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 268:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 CY_SET_REG32(ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_1_INJ_T
 269:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 270:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_SATURATE_EN_MASK) != 0u)
 271:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 272:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_SATURATE_MASK;
 273:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 274:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 275:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_IS_RANGE_CTRL_EN_MASK) != 0
 276:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 {
 277:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                     ADC_SAR_Seq_1_SAR_INTR_MASK_REG |= ADC_SAR_Seq_1_INJ_RANGE_MASK;
 278:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 }
 279:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 280:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 281:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 282:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_ALT_RESOLUTION_ON) != 0u)
 260              		.loc 1 282 0
 261 0106 324B     		ldr	r3, .L16+80
 262 0108 FA68     		ldr	r2, [r7, #12]
 263 010a 9200     		lsls	r2, r2, #2
 264 010c D258     		ldr	r2, [r2, r3]
 265 010e 8023     		movs	r3, #128
 266 0110 9B00     		lsls	r3, r3, #2
 267 0112 1340     		ands	r3, r2
 268 0114 03D0     		beq	.L11
 283:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 284:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_DEFAULT_MAX_WRK_ALT;
 269              		.loc 1 284 0
 270 0116 8023     		movs	r3, #128
 271 0118 5B00     		lsls	r3, r3, #1
 272 011a BB60     		str	r3, [r7, #8]
 273 011c 02E0     		b	.L12
 274              	.L11:
 285:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 286:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else
 287:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 288:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                counts = (int32)ADC_SAR_Seq_1_SAR_WRK_MAX_12BIT;
 275              		.loc 1 288 0
 276 011e 8023     		movs	r3, #128
 277 0120 5B01     		lsls	r3, r3, #5
 278 0122 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 11


 279              	.L12:
 289:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 290:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 291:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((ADC_SAR_Seq_1_channelsConfig[chNum] & ADC_SAR_Seq_1_DIFFERENTIAL_EN) == 0u)
 280              		.loc 1 291 0
 281 0124 2A4B     		ldr	r3, .L16+80
 282 0126 FA68     		ldr	r2, [r7, #12]
 283 0128 9200     		lsls	r2, r2, #2
 284 012a D258     		ldr	r2, [r2, r3]
 285 012c 8023     		movs	r3, #128
 286 012e 5B00     		lsls	r3, r3, #1
 287 0130 1340     		ands	r3, r2
 288 0132 05D1     		bne	.L13
 292:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 293:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if((ADC_SAR_Seq_1_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED) && \
 294:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 (ADC_SAR_Seq_1_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_1__VREF))
 295:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 296:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / -2);
 297:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 298:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 289              		.loc 1 298 0
 290 0134 294B     		ldr	r3, .L16+92
 291 0136 FA68     		ldr	r2, [r7, #12]
 292 0138 5200     		lsls	r2, r2, #1
 293 013a 0021     		movs	r1, #0
 294 013c D152     		strh	r1, [r2, r3]
 295 013e 04E0     		b	.L14
 296              	.L13:
 299:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FSIGNED */
 300:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 301:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         else    /* Differential channel */
 302:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 303:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #if(ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED)
 304:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Set offset to the half scale to convert results to signed format */
 305:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = (int16)(counts / 2);
 306:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #else
 307:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_offset[chNum] = 0;
 297              		.loc 1 307 0
 298 0140 264B     		ldr	r3, .L16+92
 299 0142 FA68     		ldr	r2, [r7, #12]
 300 0144 5200     		lsls	r2, r2, #1
 301 0146 0021     		movs	r1, #0
 302 0148 D152     		strh	r1, [r2, r3]
 303              	.L14:
 308:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             #endif /* end ADC_SAR_Seq_1_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_1__FUNSIGNED 
 309:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 310:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Calculate gain in counts per 10 volts with rounding */
 311:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_1_10MV_COUNTS) +
 304              		.loc 1 311 0 discriminator 2
 305 014a BB68     		ldr	r3, [r7, #8]
 306 014c 244A     		ldr	r2, .L16+96
 307 014e 5343     		muls	r3, r2
 308 0150 244A     		ldr	r2, .L16+100
 309 0152 9446     		mov	ip, r2
 310 0154 6344     		add	r3, r3, ip
 312:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 311              		.loc 1 312 0 discriminator 2
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 12


 312 0156 2449     		ldr	r1, .L16+104
 313 0158 1800     		movs	r0, r3
 314 015a FFF7FEFF 		bl	__aeabi_idiv
 315 015e 0300     		movs	r3, r0
 311:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                             ADC_SAR_Seq_1_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_1_DEFAULT_VREF_MV_V
 316              		.loc 1 311 0 discriminator 2
 317 0160 1BB2     		sxth	r3, r3
 318 0162 1900     		movs	r1, r3
 319 0164 214B     		ldr	r3, .L16+108
 320 0166 FA68     		ldr	r2, [r7, #12]
 321 0168 9200     		lsls	r2, r2, #2
 322 016a D150     		str	r1, [r2, r3]
 232:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 323              		.loc 1 232 0 discriminator 2
 324 016c FB68     		ldr	r3, [r7, #12]
 325 016e 0133     		adds	r3, r3, #1
 326 0170 FB60     		str	r3, [r7, #12]
 327              	.L8:
 232:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 328              		.loc 1 232 0 is_stmt 0 discriminator 1
 329 0172 FB68     		ldr	r3, [r7, #12]
 330 0174 012B     		cmp	r3, #1
 331 0176 8BD9     		bls	.L15
 313:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 314:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 332              		.loc 1 314 0 is_stmt 1
 333 0178 C046     		nop
 334 017a BD46     		mov	sp, r7
 335 017c 04B0     		add	sp, sp, #16
 336              		@ sp needed
 337 017e 80BD     		pop	{r7, pc}
 338              	.L17:
 339              		.align	2
 340              	.L16:
 341 0180 00000000 		.word	ADC_SAR_Seq_1_ISR
 342 0184 20001A40 		.word	1075445792
 343 0188 80031A40 		.word	1075446656
 344 018c E02E1010 		.word	269496032
 345 0190 E02E0010 		.word	268447456
 346 0194 00001A40 		.word	1075445760
 347 0198 04001A40 		.word	1075445764
 348 019c 08000A80 		.word	-2146828280
 349 01a0 18001A40 		.word	1075445784
 350 01a4 0000FF0F 		.word	268369920
 351 01a8 1C001A40 		.word	1075445788
 352 01ac 10001A40 		.word	1075445776
 353 01b0 04000400 		.word	262148
 354 01b4 14001A40 		.word	1075445780
 355 01b8 28021A40 		.word	1075446312
 356 01bc 38021A40 		.word	1075446328
 357 01c0 18021A40 		.word	1075446296
 358 01c4 000F1A40 		.word	1075449600
 359 01c8 30001A40 		.word	1075445808
 360 01cc FFFFFFDF 		.word	-536870913
 361 01d0 00000000 		.word	ADC_SAR_Seq_1_channelsConfig
 362 01d4 08000000 		.word	ADC_SAR_Seq_1_InputsPlacement.4874
 363 01d8 80001A40 		.word	1075445888
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 13


 364 01dc 00000000 		.word	ADC_SAR_Seq_1_offset
 365 01e0 10270000 		.word	10000
 366 01e4 72060000 		.word	1650
 367 01e8 E40C0000 		.word	3300
 368 01ec 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 369              		.cfi_endproc
 370              	.LFE1:
 371              		.size	ADC_SAR_Seq_1_Init, .-ADC_SAR_Seq_1_Init
 372              		.section	.text.ADC_SAR_Seq_1_Enable,"ax",%progbits
 373              		.align	2
 374              		.global	ADC_SAR_Seq_1_Enable
 375              		.code	16
 376              		.thumb_func
 377              		.type	ADC_SAR_Seq_1_Enable, %function
 378              	ADC_SAR_Seq_1_Enable:
 379              	.LFB2:
 315:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 316:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 317:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_1_Enable
 318:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 319:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 320:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 321:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Enables the clock and analog power for SAR ADC.
 322:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 323:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 324:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 325:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 326:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 327:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 328:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 329:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 330:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Enable(void)
 331:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 380              		.loc 1 331 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 0
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384 0000 80B5     		push	{r7, lr}
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 7, -8
 387              		.cfi_offset 14, -4
 388 0002 00AF     		add	r7, sp, #0
 389              		.cfi_def_cfa_register 7
 332:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if (0u == (ADC_SAR_Seq_1_SAR_CTRL_REG & ADC_SAR_Seq_1_ENABLE))
 390              		.loc 1 332 0
 391 0004 084B     		ldr	r3, .L21
 392 0006 1B68     		ldr	r3, [r3]
 393 0008 002B     		cmp	r3, #0
 394 000a 09DB     		blt	.L20
 333:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 334:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0)
 335:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 336:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             while (0u != (ADC_SAR_Seq_1_SAR_STATUS_REG & ADC_SAR_Seq_1_STATUS_BUSY))
 337:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 338:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* wait for SAR to go idle to avoid deadlock */
 339:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 340:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* (ADC_SAR_Seq_1_CY_SAR_IP_VER != ADC_SAR_Seq_1_CY_SAR_IP_VER0) */
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 14


 341:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 342:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_CTRL_REG |= ADC_SAR_Seq_1_ENABLE;
 395              		.loc 1 342 0
 396 000c 064B     		ldr	r3, .L21
 397 000e 064A     		ldr	r2, .L21
 398 0010 1268     		ldr	r2, [r2]
 399 0012 8021     		movs	r1, #128
 400 0014 0906     		lsls	r1, r1, #24
 401 0016 0A43     		orrs	r2, r1
 402 0018 1A60     		str	r2, [r3]
 343:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         
 344:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 345:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CyDelayUs(ADC_SAR_Seq_1_10US_DELAY);         
 403              		.loc 1 345 0
 404 001a 0A20     		movs	r0, #10
 405 001c FFF7FEFF 		bl	CyDelayUs
 406              	.L20:
 346:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 347:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 407              		.loc 1 347 0
 408 0020 C046     		nop
 409 0022 BD46     		mov	sp, r7
 410              		@ sp needed
 411 0024 80BD     		pop	{r7, pc}
 412              	.L22:
 413 0026 C046     		.align	2
 414              	.L21:
 415 0028 00001A40 		.word	1075445760
 416              		.cfi_endproc
 417              	.LFE2:
 418              		.size	ADC_SAR_Seq_1_Enable, .-ADC_SAR_Seq_1_Enable
 419              		.section	.text.ADC_SAR_Seq_1_Stop,"ax",%progbits
 420              		.align	2
 421              		.global	ADC_SAR_Seq_1_Stop
 422              		.code	16
 423              		.thumb_func
 424              		.type	ADC_SAR_Seq_1_Stop, %function
 425              	ADC_SAR_Seq_1_Stop:
 426              	.LFB3:
 348:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 349:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 350:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 351:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_Stop
 352:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 353:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 354:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 355:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 356:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mode.
 357:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 358:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 359:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 360:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 361:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 362:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 363:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 364:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 365:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_Stop(void)
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 15


 366:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 427              		.loc 1 366 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431 0000 80B5     		push	{r7, lr}
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 00AF     		add	r7, sp, #0
 436              		.cfi_def_cfa_register 7
 367:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_1_ENABLE;
 437              		.loc 1 367 0
 438 0004 044B     		ldr	r3, .L24
 439 0006 044A     		ldr	r2, .L24
 440 0008 1268     		ldr	r2, [r2]
 441 000a 5200     		lsls	r2, r2, #1
 442 000c 5208     		lsrs	r2, r2, #1
 443 000e 1A60     		str	r2, [r3]
 368:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 444              		.loc 1 368 0
 445 0010 C046     		nop
 446 0012 BD46     		mov	sp, r7
 447              		@ sp needed
 448 0014 80BD     		pop	{r7, pc}
 449              	.L25:
 450 0016 C046     		.align	2
 451              	.L24:
 452 0018 00001A40 		.word	1075445760
 453              		.cfi_endproc
 454              	.LFE3:
 455              		.size	ADC_SAR_Seq_1_Stop, .-ADC_SAR_Seq_1_Stop
 456              		.section	.text.ADC_SAR_Seq_1_StartConvert,"ax",%progbits
 457              		.align	2
 458              		.global	ADC_SAR_Seq_1_StartConvert
 459              		.code	16
 460              		.thumb_func
 461              		.type	ADC_SAR_Seq_1_StartConvert, %function
 462              	ADC_SAR_Seq_1_StartConvert:
 463              	.LFB4:
 369:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 370:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 371:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 372:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StartConvert
 373:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 374:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 375:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 376:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description:
 377:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  For free running mode, this API starts the conversion process and it
 378:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  runs continuously.
 379:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 380:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  In a triggered mode, this routine triggers every conversion by
 381:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 382:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  every conversion has to start by this API.
 383:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 384:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 385:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 16


 386:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 387:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 388:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 389:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 390:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 391:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StartConvert(void)
 392:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 464              		.loc 1 392 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468 0000 80B5     		push	{r7, lr}
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 7, -8
 471              		.cfi_offset 14, -4
 472 0002 00AF     		add	r7, sp, #0
 473              		.cfi_def_cfa_register 7
 393:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 394:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_1_CONTINUOUS_EN;
 395:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #else /* Firmware trigger */
 396:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_START_CTRL_REG = ADC_SAR_Seq_1_FW_TRIGGER;
 474              		.loc 1 396 0
 475 0004 024B     		ldr	r3, .L27
 476 0006 0122     		movs	r2, #1
 477 0008 1A60     		str	r2, [r3]
 397:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* End ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 398:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 399:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 478              		.loc 1 399 0
 479 000a C046     		nop
 480 000c BD46     		mov	sp, r7
 481              		@ sp needed
 482 000e 80BD     		pop	{r7, pc}
 483              	.L28:
 484              		.align	2
 485              	.L27:
 486 0010 24001A40 		.word	1075445796
 487              		.cfi_endproc
 488              	.LFE4:
 489              		.size	ADC_SAR_Seq_1_StartConvert, .-ADC_SAR_Seq_1_StartConvert
 490              		.section	.text.ADC_SAR_Seq_1_StopConvert,"ax",%progbits
 491              		.align	2
 492              		.global	ADC_SAR_Seq_1_StopConvert
 493              		.code	16
 494              		.thumb_func
 495              		.type	ADC_SAR_Seq_1_StopConvert, %function
 496              	ADC_SAR_Seq_1_StopConvert:
 497              	.LFB5:
 400:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 401:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 402:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 403:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_StopConvert
 404:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 405:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 406:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 407:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Forces the ADC to stop all conversions.
 408:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 17


 409:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 410:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 411:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 412:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 413:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 414:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 415:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 416:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_StopConvert(void)
 417:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 498              		.loc 1 417 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502 0000 80B5     		push	{r7, lr}
 503              		.cfi_def_cfa_offset 8
 504              		.cfi_offset 7, -8
 505              		.cfi_offset 14, -4
 506 0002 00AF     		add	r7, sp, #0
 507              		.cfi_def_cfa_register 7
 418:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_1__FREERUNNING)
 419:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_1_CONTINUOUS_EN);
 420:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_1__FREERUNNING */
 421:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 508              		.loc 1 421 0
 509 0004 C046     		nop
 510 0006 BD46     		mov	sp, r7
 511              		@ sp needed
 512 0008 80BD     		pop	{r7, pc}
 513              		.cfi_endproc
 514              	.LFE5:
 515              		.size	ADC_SAR_Seq_1_StopConvert, .-ADC_SAR_Seq_1_StopConvert
 516              		.section	.text.ADC_SAR_Seq_1_IsEndConversion,"ax",%progbits
 517              		.align	2
 518              		.global	ADC_SAR_Seq_1_IsEndConversion
 519              		.code	16
 520              		.thumb_func
 521              		.type	ADC_SAR_Seq_1_IsEndConversion, %function
 522              	ADC_SAR_Seq_1_IsEndConversion:
 523              	.LFB6:
 422:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 423:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 424:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 425:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_IsEndConversion
 426:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 427:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 428:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 429:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Checks for ADC end of conversion for the case one
 430:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channel and end of scan for the case of multiple channels. It acts
 431:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  as a software version of the EOC. This function provides the
 432:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  programmer with two options. In one mode this function
 433:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  immediately returns with the conversion status. In the other mode,
 434:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  the function does not return (blocking) until the conversion has
 435:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  completed.
 436:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 437:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 438:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 439:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 18


 440:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 441:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              for injection channel
 442:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 443:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *                              channel conversion
 444:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 445:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 446:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 447:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 448:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 449:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 450:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** uint32 ADC_SAR_Seq_1_IsEndConversion(uint32 retMode)
 451:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 524              		.loc 1 451 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 16
 527              		@ frame_needed = 1, uses_anonymous_args = 0
 528 0000 80B5     		push	{r7, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 7, -8
 531              		.cfi_offset 14, -4
 532 0002 84B0     		sub	sp, sp, #16
 533              		.cfi_def_cfa_offset 24
 534 0004 00AF     		add	r7, sp, #0
 535              		.cfi_def_cfa_register 7
 536 0006 7860     		str	r0, [r7, #4]
 452:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 status = 0u;
 537              		.loc 1 452 0
 538 0008 0023     		movs	r3, #0
 539 000a FB60     		str	r3, [r7, #12]
 453:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 454:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS | ADC_SAR_Seq_1_WAIT_FOR_RESULT)) != 0u)
 540              		.loc 1 454 0
 541 000c 7B68     		ldr	r3, [r7, #4]
 542 000e 0322     		movs	r2, #3
 543 0010 1340     		ands	r3, r2
 544 0012 11D0     		beq	.L31
 545              	.L33:
 455:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 456:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         do
 457:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 458:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             status = ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_EOS_MASK;
 546              		.loc 1 458 0 discriminator 2
 547 0014 0B4B     		ldr	r3, .L35
 548 0016 1B68     		ldr	r3, [r3]
 549 0018 0122     		movs	r2, #1
 550 001a 1340     		ands	r3, r2
 551 001c FB60     		str	r3, [r7, #12]
 459:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT) != 0u));
 552              		.loc 1 459 0 discriminator 2
 553 001e FB68     		ldr	r3, [r7, #12]
 554 0020 002B     		cmp	r3, #0
 555 0022 03D1     		bne	.L32
 556              		.loc 1 459 0 is_stmt 0 discriminator 1
 557 0024 7B68     		ldr	r3, [r7, #4]
 558 0026 0222     		movs	r2, #2
 559 0028 1340     		ands	r3, r2
 560 002a F3D1     		bne	.L33
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 19


 561              	.L32:
 460:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 461:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if(status != 0u)
 562              		.loc 1 461 0 is_stmt 1
 563 002c FB68     		ldr	r3, [r7, #12]
 564 002e 002B     		cmp	r3, #0
 565 0030 02D0     		beq	.L31
 462:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 463:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             /* Clear EOS bit */
 464:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_EOS_MASK;
 566              		.loc 1 464 0
 567 0032 044B     		ldr	r3, .L35
 568 0034 0122     		movs	r2, #1
 569 0036 1A60     		str	r2, [r3]
 570              	.L31:
 465:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 466:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 467:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 468:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 469:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         if((retMode & (ADC_SAR_Seq_1_RETURN_STATUS_INJ | ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ)) != 0u)
 470:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         {
 471:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             do
 472:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 473:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 status |= ADC_SAR_Seq_1_SAR_INTR_REG & ADC_SAR_Seq_1_INJ_EOC_MASK;
 474:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }while(((status & ADC_SAR_Seq_1_INJ_EOC_MASK) == 0u) &&
 475:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                    ((retMode & ADC_SAR_Seq_1_WAIT_FOR_RESULT_INJ) != 0u));
 476:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 477:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((status & ADC_SAR_Seq_1_INJ_EOC_MASK) != 0u)
 478:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 479:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 /* Clear Injection EOS bit */
 480:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_SAR_INTR_REG = ADC_SAR_Seq_1_INJ_EOC_MASK;
 481:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 482:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         }
 483:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 484:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 485:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return (status);
 571              		.loc 1 485 0
 572 0038 FB68     		ldr	r3, [r7, #12]
 486:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 573              		.loc 1 486 0
 574 003a 1800     		movs	r0, r3
 575 003c BD46     		mov	sp, r7
 576 003e 04B0     		add	sp, sp, #16
 577              		@ sp needed
 578 0040 80BD     		pop	{r7, pc}
 579              	.L36:
 580 0042 C046     		.align	2
 581              	.L35:
 582 0044 10021A40 		.word	1075446288
 583              		.cfi_endproc
 584              	.LFE6:
 585              		.size	ADC_SAR_Seq_1_IsEndConversion, .-ADC_SAR_Seq_1_IsEndConversion
 586              		.section	.text.ADC_SAR_Seq_1_GetResult16,"ax",%progbits
 587              		.align	2
 588              		.global	ADC_SAR_Seq_1_GetResult16
 589              		.code	16
 590              		.thumb_func
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 20


 591              		.type	ADC_SAR_Seq_1_GetResult16, %function
 592              	ADC_SAR_Seq_1_GetResult16:
 593              	.LFB7:
 487:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 488:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 489:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 490:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_GetResult16
 491:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 492:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 493:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 494:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Gets the data available in the SAR DATA register.
 495:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 496:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 497:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: The ADC channel in which to return the result. The first channel
 498:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 499:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 500:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 501:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Returns converted data as a signed 16-bit integer
 502:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 503:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 504:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** int16 ADC_SAR_Seq_1_GetResult16(uint32 chan)
 505:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 594              		.loc 1 505 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 16
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598 0000 80B5     		push	{r7, lr}
 599              		.cfi_def_cfa_offset 8
 600              		.cfi_offset 7, -8
 601              		.cfi_offset 14, -4
 602 0002 84B0     		sub	sp, sp, #16
 603              		.cfi_def_cfa_offset 24
 604 0004 00AF     		add	r7, sp, #0
 605              		.cfi_def_cfa_register 7
 606 0006 7860     		str	r0, [r7, #4]
 506:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     uint32 result;
 507:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 508:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 509:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 607              		.loc 1 509 0
 608 0008 7B68     		ldr	r3, [r7, #4]
 609 000a 012B     		cmp	r3, #1
 610 000c 02D9     		bls	.L38
 611              		.loc 1 509 0 is_stmt 0 discriminator 1
 612 000e 0020     		movs	r0, #0
 613 0010 FFF7FEFF 		bl	CyHalt
 614              	.L38:
 510:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 511:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     if(chan < ADC_SAR_Seq_1_SEQUENCED_CHANNELS_NUM)
 615              		.loc 1 511 0 is_stmt 1
 616 0014 7B68     		ldr	r3, [r7, #4]
 617 0016 012B     		cmp	r3, #1
 618 0018 09D8     		bhi	.L39
 512:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 513:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_1_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 619              		.loc 1 513 0
 620 001a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 21


 621 001c 9B00     		lsls	r3, r3, #2
 622 001e 084A     		ldr	r2, .L42
 623 0020 9446     		mov	ip, r2
 624 0022 6344     		add	r3, r3, ip
 625 0024 1B68     		ldr	r3, [r3]
 626 0026 1B04     		lsls	r3, r3, #16
 627 0028 1B0C     		lsrs	r3, r3, #16
 628 002a FB60     		str	r3, [r7, #12]
 629 002c 01E0     		b	.L40
 630              	.L39:
 514:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 ADC_SAR_Seq_1_RESULT_MASK;
 515:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 516:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     else
 517:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 518:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 519:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = ADC_SAR_Seq_1_SAR_INJ_RESULT_REG & ADC_SAR_Seq_1_RESULT_MASK;
 520:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #else
 521:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             result = 0u;
 631              		.loc 1 521 0
 632 002e 0023     		movs	r3, #0
 633 0030 FB60     		str	r3, [r7, #12]
 634              	.L40:
 522:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 523:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 524:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 525:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     return ( (int16)result );
 635              		.loc 1 525 0
 636 0032 FB68     		ldr	r3, [r7, #12]
 637 0034 1BB2     		sxth	r3, r3
 526:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 638              		.loc 1 526 0
 639 0036 1800     		movs	r0, r3
 640 0038 BD46     		mov	sp, r7
 641 003a 04B0     		add	sp, sp, #16
 642              		@ sp needed
 643 003c 80BD     		pop	{r7, pc}
 644              	.L43:
 645 003e C046     		.align	2
 646              	.L42:
 647 0040 80011A40 		.word	1075446144
 648              		.cfi_endproc
 649              	.LFE7:
 650              		.size	ADC_SAR_Seq_1_GetResult16, .-ADC_SAR_Seq_1_GetResult16
 651              		.section	.text.ADC_SAR_Seq_1_SetChanMask,"ax",%progbits
 652              		.align	2
 653              		.global	ADC_SAR_Seq_1_SetChanMask
 654              		.code	16
 655              		.thumb_func
 656              		.type	ADC_SAR_Seq_1_SetChanMask, %function
 657              	ADC_SAR_Seq_1_SetChanMask:
 658              	.LFB8:
 527:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 528:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 529:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 530:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetChanMask
 531:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 532:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 22


 533:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 534:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel enable mask.
 535:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 536:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 537:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that will be
 538:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  scanned. Setting bits for channels that do not exist will have no
 539:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  effect. For example, if only 6 channels were enabled, setting a
 540:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 541:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  This API will not enable the injection channel.
 542:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Examples: If the component is setup to sequence through 8
 543:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 544:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 545:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 546:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 547:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 548:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 549:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetChanMask(uint32 mask)
 550:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 659              		.loc 1 550 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663 0000 80B5     		push	{r7, lr}
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 7, -8
 666              		.cfi_offset 14, -4
 667 0002 82B0     		sub	sp, sp, #8
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0006 7860     		str	r0, [r7, #4]
 551:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 672              		.loc 1 551 0
 673 0008 044B     		ldr	r3, .L45
 674 000a 7A68     		ldr	r2, [r7, #4]
 675 000c 0321     		movs	r1, #3
 676 000e 0A40     		ands	r2, r1
 677 0010 1A60     		str	r2, [r3]
 552:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 678              		.loc 1 552 0
 679 0012 C046     		nop
 680 0014 BD46     		mov	sp, r7
 681 0016 02B0     		add	sp, sp, #8
 682              		@ sp needed
 683 0018 80BD     		pop	{r7, pc}
 684              	.L46:
 685 001a C046     		.align	2
 686              	.L45:
 687 001c 20001A40 		.word	1075445792
 688              		.cfi_endproc
 689              	.LFE8:
 690              		.size	ADC_SAR_Seq_1_SetChanMask, .-ADC_SAR_Seq_1_SetChanMask
 691              		.section	.text.ADC_SAR_Seq_1_SetLowLimit,"ax",%progbits
 692              		.align	2
 693              		.global	ADC_SAR_Seq_1_SetLowLimit
 694              		.code	16
 695              		.thumb_func
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 23


 696              		.type	ADC_SAR_Seq_1_SetLowLimit, %function
 697              	ADC_SAR_Seq_1_SetLowLimit:
 698              	.LFB9:
 553:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 554:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED)
 555:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 556:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 557:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 558:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_EnableInjection
 559:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 560:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 561:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 562:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Enables the injection channel for the next scan only.
 563:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 564:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 565:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 566:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 567:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 568:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  None.
 569:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 570:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 571:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     void ADC_SAR_Seq_1_EnableInjection(void)
 572:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 573:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         ADC_SAR_Seq_1_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_1_INJ_CHAN_EN;
 574:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 575:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 576:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #endif /* ADC_SAR_Seq_1_INJ_CHANNEL_ENABLED */
 577:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 578:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 579:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 580:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLowLimit
 581:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 582:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 583:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 584:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 585:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 586:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 587:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  lowLimit: The low limit for a limit condition.
 588:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 589:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 590:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 591:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 592:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 593:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLowLimit(uint32 lowLimit)
 594:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 699              		.loc 1 594 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 1, uses_anonymous_args = 0
 703 0000 80B5     		push	{r7, lr}
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 0002 82B0     		sub	sp, sp, #8
 708              		.cfi_def_cfa_offset 16
 709 0004 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 24


 711 0006 7860     		str	r0, [r7, #4]
 595:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_LOW_MASK);
 712              		.loc 1 595 0
 713 0008 084B     		ldr	r3, .L48
 714 000a 084A     		ldr	r2, .L48
 715 000c 1268     		ldr	r2, [r2]
 716 000e 120C     		lsrs	r2, r2, #16
 717 0010 1204     		lsls	r2, r2, #16
 718 0012 1A60     		str	r2, [r3]
 596:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_1_RANGE_LOW_MASK;
 719              		.loc 1 596 0
 720 0014 054B     		ldr	r3, .L48
 721 0016 054A     		ldr	r2, .L48
 722 0018 1168     		ldr	r1, [r2]
 723 001a 7A68     		ldr	r2, [r7, #4]
 724 001c 1204     		lsls	r2, r2, #16
 725 001e 120C     		lsrs	r2, r2, #16
 726 0020 0A43     		orrs	r2, r1
 727 0022 1A60     		str	r2, [r3]
 597:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 728              		.loc 1 597 0
 729 0024 C046     		nop
 730 0026 BD46     		mov	sp, r7
 731 0028 02B0     		add	sp, sp, #8
 732              		@ sp needed
 733 002a 80BD     		pop	{r7, pc}
 734              	.L49:
 735              		.align	2
 736              	.L48:
 737 002c 18001A40 		.word	1075445784
 738              		.cfi_endproc
 739              	.LFE9:
 740              		.size	ADC_SAR_Seq_1_SetLowLimit, .-ADC_SAR_Seq_1_SetLowLimit
 741              		.section	.text.ADC_SAR_Seq_1_SetHighLimit,"ax",%progbits
 742              		.align	2
 743              		.global	ADC_SAR_Seq_1_SetHighLimit
 744              		.code	16
 745              		.thumb_func
 746              		.type	ADC_SAR_Seq_1_SetHighLimit, %function
 747              	ADC_SAR_Seq_1_SetHighLimit:
 748              	.LFB10:
 598:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 599:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 600:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 601:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetHighLimit
 602:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 603:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 604:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 605:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the low limit parameter for a limit condition.
 606:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 607:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 608:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  highLimit: The high limit for a limit condition.
 609:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 610:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 611:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 612:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 613:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 25


 614:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetHighLimit(uint32 highLimit)
 615:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 749              		.loc 1 615 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 8
 752              		@ frame_needed = 1, uses_anonymous_args = 0
 753 0000 80B5     		push	{r7, lr}
 754              		.cfi_def_cfa_offset 8
 755              		.cfi_offset 7, -8
 756              		.cfi_offset 14, -4
 757 0002 82B0     		sub	sp, sp, #8
 758              		.cfi_def_cfa_offset 16
 759 0004 00AF     		add	r7, sp, #0
 760              		.cfi_def_cfa_register 7
 761 0006 7860     		str	r0, [r7, #4]
 616:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_1_RANGE_HIGH_MASK);
 762              		.loc 1 616 0
 763 0008 084B     		ldr	r3, .L51
 764 000a 084A     		ldr	r2, .L51
 765 000c 1268     		ldr	r2, [r2]
 766 000e 1204     		lsls	r2, r2, #16
 767 0010 120C     		lsrs	r2, r2, #16
 768 0012 1A60     		str	r2, [r3]
 617:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_1_RANGE_HIGH_OFFSET);
 769              		.loc 1 617 0
 770 0014 054B     		ldr	r3, .L51
 771 0016 054A     		ldr	r2, .L51
 772 0018 1168     		ldr	r1, [r2]
 773 001a 7A68     		ldr	r2, [r7, #4]
 774 001c 1204     		lsls	r2, r2, #16
 775 001e 0A43     		orrs	r2, r1
 776 0020 1A60     		str	r2, [r3]
 618:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 777              		.loc 1 618 0
 778 0022 C046     		nop
 779 0024 BD46     		mov	sp, r7
 780 0026 02B0     		add	sp, sp, #8
 781              		@ sp needed
 782 0028 80BD     		pop	{r7, pc}
 783              	.L52:
 784 002a C046     		.align	2
 785              	.L51:
 786 002c 18001A40 		.word	1075445784
 787              		.cfi_endproc
 788              	.LFE10:
 789              		.size	ADC_SAR_Seq_1_SetHighLimit, .-ADC_SAR_Seq_1_SetHighLimit
 790              		.section	.text.ADC_SAR_Seq_1_SetLimitMask,"ax",%progbits
 791              		.align	2
 792              		.global	ADC_SAR_Seq_1_SetLimitMask
 793              		.code	16
 794              		.thumb_func
 795              		.type	ADC_SAR_Seq_1_SetLimitMask, %function
 796              	ADC_SAR_Seq_1_SetLimitMask:
 797              	.LFB11:
 619:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 620:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 621:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 26


 622:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetLimitMask
 623:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 624:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 625:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 626:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel limit condition mask.
 627:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 628:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 629:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 630:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 631:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 6 channels were enabled,
 632:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 633:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 634:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 635:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 636:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 637:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 638:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetLimitMask(uint32 mask)
 639:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 798              		.loc 1 639 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 8
 801              		@ frame_needed = 1, uses_anonymous_args = 0
 802 0000 80B5     		push	{r7, lr}
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 82B0     		sub	sp, sp, #8
 807              		.cfi_def_cfa_offset 16
 808 0004 00AF     		add	r7, sp, #0
 809              		.cfi_def_cfa_register 7
 810 0006 7860     		str	r0, [r7, #4]
 640:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 811              		.loc 1 640 0
 812 0008 044B     		ldr	r3, .L54
 813 000a 7A68     		ldr	r2, [r7, #4]
 814 000c 0321     		movs	r1, #3
 815 000e 0A40     		ands	r2, r1
 816 0010 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 817              		.loc 1 641 0
 818 0012 C046     		nop
 819 0014 BD46     		mov	sp, r7
 820 0016 02B0     		add	sp, sp, #8
 821              		@ sp needed
 822 0018 80BD     		pop	{r7, pc}
 823              	.L55:
 824 001a C046     		.align	2
 825              	.L54:
 826 001c 38021A40 		.word	1075446328
 827              		.cfi_endproc
 828              	.LFE11:
 829              		.size	ADC_SAR_Seq_1_SetLimitMask, .-ADC_SAR_Seq_1_SetLimitMask
 830              		.section	.text.ADC_SAR_Seq_1_SetSatMask,"ax",%progbits
 831              		.align	2
 832              		.global	ADC_SAR_Seq_1_SetSatMask
 833              		.code	16
 834              		.thumb_func
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 27


 835              		.type	ADC_SAR_Seq_1_SetSatMask, %function
 836              	ADC_SAR_Seq_1_SetSatMask:
 837              	.LFB12:
 642:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 643:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 644:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 645:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetSatMask
 646:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 647:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 648:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 649:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Sets the channel saturation event mask.
 650:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 651:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 652:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  mask: Sets which channels that may cause a
 653:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 654:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  will have no effect. For example, if only 8 channels were enabled,
 655:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 656:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 657:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 658:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 659:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 660:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 661:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetSatMask(uint32 mask)
 662:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 838              		.loc 1 662 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 8
 841              		@ frame_needed = 1, uses_anonymous_args = 0
 842 0000 80B5     		push	{r7, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 82B0     		sub	sp, sp, #8
 847              		.cfi_def_cfa_offset 16
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 663:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_1_MAX_CHANNELS_EN_MASK;
 851              		.loc 1 663 0
 852 0008 044B     		ldr	r3, .L57
 853 000a 7A68     		ldr	r2, [r7, #4]
 854 000c 0321     		movs	r1, #3
 855 000e 0A40     		ands	r2, r1
 856 0010 1A60     		str	r2, [r3]
 664:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 857              		.loc 1 664 0
 858 0012 C046     		nop
 859 0014 BD46     		mov	sp, r7
 860 0016 02B0     		add	sp, sp, #8
 861              		@ sp needed
 862 0018 80BD     		pop	{r7, pc}
 863              	.L58:
 864 001a C046     		.align	2
 865              	.L57:
 866 001c 28021A40 		.word	1075446312
 867              		.cfi_endproc
 868              	.LFE12:
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 28


 869              		.size	ADC_SAR_Seq_1_SetSatMask, .-ADC_SAR_Seq_1_SetSatMask
 870              		.section	.text.ADC_SAR_Seq_1_SetOffset,"ax",%progbits
 871              		.align	2
 872              		.global	ADC_SAR_Seq_1_SetOffset
 873              		.code	16
 874              		.thumb_func
 875              		.type	ADC_SAR_Seq_1_SetOffset, %function
 876              	ADC_SAR_Seq_1_SetOffset:
 877              	.LFB13:
 665:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 666:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 667:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 668:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetOffset
 669:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 670:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 671:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 672:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   Description: Sets the ADC offset which is used by the functions
 673:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 674:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   to substract the offset from the given reading
 675:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   before calculating the voltage conversion.
 676:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 677:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 678:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 679:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  offset: This value is a measured value when the
 680:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *          inputs are shorted or connected to the same input voltage.
 681:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 682:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 683:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 684:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 685:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 686:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_Offset:  Modified to set the user provided offset.
 687:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 688:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 689:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetOffset(uint32 chan, int16 offset)
 690:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 878              		.loc 1 690 0
 879              		.cfi_startproc
 880              		@ args = 0, pretend = 0, frame = 8
 881              		@ frame_needed = 1, uses_anonymous_args = 0
 882 0000 80B5     		push	{r7, lr}
 883              		.cfi_def_cfa_offset 8
 884              		.cfi_offset 7, -8
 885              		.cfi_offset 14, -4
 886 0002 82B0     		sub	sp, sp, #8
 887              		.cfi_def_cfa_offset 16
 888 0004 00AF     		add	r7, sp, #0
 889              		.cfi_def_cfa_register 7
 890 0006 7860     		str	r0, [r7, #4]
 891 0008 0A00     		movs	r2, r1
 892 000a BB1C     		adds	r3, r7, #2
 893 000c 1A80     		strh	r2, [r3]
 691:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 692:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 894              		.loc 1 692 0
 895 000e 7B68     		ldr	r3, [r7, #4]
 896 0010 012B     		cmp	r3, #1
 897 0012 02D9     		bls	.L60
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 29


 898              		.loc 1 692 0 is_stmt 0 discriminator 1
 899 0014 0020     		movs	r0, #0
 900 0016 FFF7FEFF 		bl	CyHalt
 901              	.L60:
 693:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 694:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_offset[chan] = offset;
 902              		.loc 1 694 0 is_stmt 1
 903 001a 054B     		ldr	r3, .L61
 904 001c 7A68     		ldr	r2, [r7, #4]
 905 001e 5200     		lsls	r2, r2, #1
 906 0020 B91C     		adds	r1, r7, #2
 907 0022 0988     		ldrh	r1, [r1]
 908 0024 D152     		strh	r1, [r2, r3]
 695:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 909              		.loc 1 695 0
 910 0026 C046     		nop
 911 0028 BD46     		mov	sp, r7
 912 002a 02B0     		add	sp, sp, #8
 913              		@ sp needed
 914 002c 80BD     		pop	{r7, pc}
 915              	.L62:
 916 002e C046     		.align	2
 917              	.L61:
 918 0030 00000000 		.word	ADC_SAR_Seq_1_offset
 919              		.cfi_endproc
 920              	.LFE13:
 921              		.size	ADC_SAR_Seq_1_SetOffset, .-ADC_SAR_Seq_1_SetOffset
 922              		.section	.text.ADC_SAR_Seq_1_SetGain,"ax",%progbits
 923              		.align	2
 924              		.global	ADC_SAR_Seq_1_SetGain
 925              		.code	16
 926              		.thumb_func
 927              		.type	ADC_SAR_Seq_1_SetGain, %function
 928              	ADC_SAR_Seq_1_SetGain:
 929              	.LFB14:
 696:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 697:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 698:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** /*******************************************************************************
 699:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Function Name: ADC_SAR_Seq_1_SetGain
 700:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** ********************************************************************************
 701:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 702:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Summary:
 703:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 704:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion functions below. This value is set by default by the
 705:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  reference and input range settings. It should only be used to further
 706:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  calibrate the ADC with a known input or if an external reference is
 707:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 708:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 709:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  conversion between ADC counts and voltage.
 710:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 711:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Parameters:
 712:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  chan: ADC channel number.
 713:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  adcGain: ADC gain in counts per 10 volts.
 714:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 715:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Return:
 716:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  None.
 717:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 30


 718:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** * Global variables:
 719:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *  ADC_SAR_Seq_1_CountsPer10Volt:  modified to set the ADC gain in counts
 720:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *   per 10 volt.
 721:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *
 722:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** *******************************************************************************/
 723:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** void ADC_SAR_Seq_1_SetGain(uint32 chan, int32 adcGain)
 724:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** {
 930              		.loc 1 724 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 8
 933              		@ frame_needed = 1, uses_anonymous_args = 0
 934 0000 80B5     		push	{r7, lr}
 935              		.cfi_def_cfa_offset 8
 936              		.cfi_offset 7, -8
 937              		.cfi_offset 14, -4
 938 0002 82B0     		sub	sp, sp, #8
 939              		.cfi_def_cfa_offset 16
 940 0004 00AF     		add	r7, sp, #0
 941              		.cfi_def_cfa_register 7
 942 0006 7860     		str	r0, [r7, #4]
 943 0008 3960     		str	r1, [r7]
 725:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 726:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 944              		.loc 1 726 0
 945 000a 7B68     		ldr	r3, [r7, #4]
 946 000c 012B     		cmp	r3, #1
 947 000e 02D9     		bls	.L64
 948              		.loc 1 726 0 is_stmt 0 discriminator 1
 949 0010 0020     		movs	r0, #0
 950 0012 FFF7FEFF 		bl	CyHalt
 951              	.L64:
 727:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 728:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ADC_SAR_Seq_1_countsPer10Volt[chan] = adcGain;
 952              		.loc 1 728 0 is_stmt 1
 953 0016 044B     		ldr	r3, .L65
 954 0018 7A68     		ldr	r2, [r7, #4]
 955 001a 9200     		lsls	r2, r2, #2
 956 001c 3968     		ldr	r1, [r7]
 957 001e D150     		str	r1, [r2, r3]
 729:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** }
 958              		.loc 1 729 0
 959 0020 C046     		nop
 960 0022 BD46     		mov	sp, r7
 961 0024 02B0     		add	sp, sp, #8
 962              		@ sp needed
 963 0026 80BD     		pop	{r7, pc}
 964              	.L66:
 965              		.align	2
 966              	.L65:
 967 0028 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 968              		.cfi_endproc
 969              	.LFE14:
 970              		.size	ADC_SAR_Seq_1_SetGain, .-ADC_SAR_Seq_1_SetGain
 971              		.section	.text.ADC_SAR_Seq_1_CountsTo_mVolts,"ax",%progbits
 972              		.align	2
 973              		.global	ADC_SAR_Seq_1_CountsTo_mVolts
 974              		.code	16
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 31


 975              		.thumb_func
 976              		.type	ADC_SAR_Seq_1_CountsTo_mVolts, %function
 977              	ADC_SAR_Seq_1_CountsTo_mVolts:
 978              	.LFB15:
 730:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 731:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 732:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** #if(ADC_SAR_Seq_1_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_1__RIGHT)
 733:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 734:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 735:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 736:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_mVolts
 737:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 738:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 739:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 740:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to mVolts
 741:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 742:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 743:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 744:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 745:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 746:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 747:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 748:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in mVolts
 749:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 750:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 751:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to mVolts.
 752:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 753:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 754:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 755:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 756:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int16 ADC_SAR_Seq_1_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 757:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 979              		.loc 1 757 0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 16
 982              		@ frame_needed = 1, uses_anonymous_args = 0
 983 0000 80B5     		push	{r7, lr}
 984              		.cfi_def_cfa_offset 8
 985              		.cfi_offset 7, -8
 986              		.cfi_offset 14, -4
 987 0002 84B0     		sub	sp, sp, #16
 988              		.cfi_def_cfa_offset 24
 989 0004 00AF     		add	r7, sp, #0
 990              		.cfi_def_cfa_register 7
 991 0006 7860     		str	r0, [r7, #4]
 992 0008 0A00     		movs	r2, r1
 993 000a BB1C     		adds	r3, r7, #2
 994 000c 1A80     		strh	r2, [r3]
 758:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int16 mVolts;
 759:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 760:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 761:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 995              		.loc 1 761 0
 996 000e 7B68     		ldr	r3, [r7, #4]
 997 0010 012B     		cmp	r3, #1
 998 0012 02D9     		bls	.L68
 999              		.loc 1 761 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 32


 1000 0014 0020     		movs	r0, #0
 1001 0016 FFF7FEFF 		bl	CyHalt
 1002              	.L68:
 762:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 763:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 764:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 765:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 1003              		.loc 1 765 0 is_stmt 1
 1004 001a 274B     		ldr	r3, .L76
 1005 001c 7A68     		ldr	r2, [r7, #4]
 1006 001e 9200     		lsls	r2, r2, #2
 1007 0020 D258     		ldr	r2, [r2, r3]
 1008 0022 8023     		movs	r3, #128
 1009 0024 DB00     		lsls	r3, r3, #3
 1010 0026 1340     		ands	r3, r2
 1011 0028 08D0     		beq	.L69
 766:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 767:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 1012              		.loc 1 767 0
 1013 002a BA1C     		adds	r2, r7, #2
 1014 002c BB1C     		adds	r3, r7, #2
 1015 002e 0021     		movs	r1, #0
 1016 0030 5B5E     		ldrsh	r3, [r3, r1]
 1017 0032 002B     		cmp	r3, #0
 1018 0034 00DA     		bge	.L70
 1019 0036 0133     		adds	r3, r3, #1
 1020              	.L70:
 1021 0038 5B10     		asrs	r3, r3, #1
 1022 003a 1380     		strh	r3, [r2]
 1023              	.L69:
 768:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 769:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 770:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 771:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 772:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1024              		.loc 1 772 0
 1025 003c 1F4B     		ldr	r3, .L76+4
 1026 003e 7A68     		ldr	r2, [r7, #4]
 1027 0040 5200     		lsls	r2, r2, #1
 1028 0042 D35A     		ldrh	r3, [r2, r3]
 1029 0044 19B2     		sxth	r1, r3
 1030 0046 BB1C     		adds	r3, r7, #2
 1031 0048 1A88     		ldrh	r2, [r3]
 1032 004a 8BB2     		uxth	r3, r1
 1033 004c D31A     		subs	r3, r2, r3
 1034 004e 9AB2     		uxth	r2, r3
 1035 0050 BB1C     		adds	r3, r7, #2
 1036 0052 1A80     		strh	r2, [r3]
 773:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 774:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_1_10MV_COUNTS) + ( (adcCounts > 0) ?
 1037              		.loc 1 774 0
 1038 0054 BB1C     		adds	r3, r7, #2
 1039 0056 0022     		movs	r2, #0
 1040 0058 9B5E     		ldrsh	r3, [r3, r2]
 1041 005a 194A     		ldr	r2, .L76+8
 1042 005c 5A43     		muls	r2, r3
 775:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 33


 1043              		.loc 1 775 0
 1044 005e BB1C     		adds	r3, r7, #2
 1045 0060 0021     		movs	r1, #0
 1046 0062 5B5E     		ldrsh	r3, [r3, r1]
 1047 0064 002B     		cmp	r3, #0
 1048 0066 08DD     		ble	.L71
 1049              		.loc 1 775 0 is_stmt 0 discriminator 1
 1050 0068 164B     		ldr	r3, .L76+12
 1051 006a 7968     		ldr	r1, [r7, #4]
 1052 006c 8900     		lsls	r1, r1, #2
 1053 006e CB58     		ldr	r3, [r1, r3]
 1054 0070 002B     		cmp	r3, #0
 1055 0072 00DA     		bge	.L72
 1056 0074 0133     		adds	r3, r3, #1
 1057              	.L72:
 1058 0076 5B10     		asrs	r3, r3, #1
 1059 0078 08E0     		b	.L73
 1060              	.L71:
 1061              		.loc 1 775 0 discriminator 2
 1062 007a 124B     		ldr	r3, .L76+12
 1063 007c 7968     		ldr	r1, [r7, #4]
 1064 007e 8900     		lsls	r1, r1, #2
 1065 0080 CB58     		ldr	r3, [r1, r3]
 1066 0082 002B     		cmp	r3, #0
 1067 0084 00DA     		bge	.L74
 1068 0086 0133     		adds	r3, r3, #1
 1069              	.L74:
 1070 0088 5B10     		asrs	r3, r3, #1
 1071 008a 5B42     		rsbs	r3, r3, #0
 1072              	.L73:
 774:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1073              		.loc 1 774 0 is_stmt 1
 1074 008c D018     		adds	r0, r2, r3
 776:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  / ADC_SAR_Seq_1_countsPer10Volt[chan]);
 1075              		.loc 1 776 0
 1076 008e 0D4B     		ldr	r3, .L76+12
 1077 0090 7A68     		ldr	r2, [r7, #4]
 1078 0092 9200     		lsls	r2, r2, #2
 1079 0094 D358     		ldr	r3, [r2, r3]
 1080 0096 1900     		movs	r1, r3
 1081 0098 FFF7FEFF 		bl	__aeabi_idiv
 1082 009c 0300     		movs	r3, r0
 1083 009e 1A00     		movs	r2, r3
 774:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                  (ADC_SAR_Seq_1_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_1_countsPer10Volt[chan]
 1084              		.loc 1 774 0
 1085 00a0 0E23     		movs	r3, #14
 1086 00a2 FB18     		adds	r3, r7, r3
 1087 00a4 1A80     		strh	r2, [r3]
 777:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 778:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( mVolts );
 1088              		.loc 1 778 0
 1089 00a6 0E23     		movs	r3, #14
 1090 00a8 FB18     		adds	r3, r7, r3
 1091 00aa 0022     		movs	r2, #0
 1092 00ac 9B5E     		ldrsh	r3, [r3, r2]
 779:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1093              		.loc 1 779 0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 34


 1094 00ae 1800     		movs	r0, r3
 1095 00b0 BD46     		mov	sp, r7
 1096 00b2 04B0     		add	sp, sp, #16
 1097              		@ sp needed
 1098 00b4 80BD     		pop	{r7, pc}
 1099              	.L77:
 1100 00b6 C046     		.align	2
 1101              	.L76:
 1102 00b8 00000000 		.word	ADC_SAR_Seq_1_channelsConfig
 1103 00bc 00000000 		.word	ADC_SAR_Seq_1_offset
 1104 00c0 10270000 		.word	10000
 1105 00c4 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1106              		.cfi_endproc
 1107              	.LFE15:
 1108              		.size	ADC_SAR_Seq_1_CountsTo_mVolts, .-ADC_SAR_Seq_1_CountsTo_mVolts
 1109              		.global	__aeabi_lmul
 1110              		.global	__aeabi_ldivmod
 1111              		.section	.text.ADC_SAR_Seq_1_CountsTo_uVolts,"ax",%progbits
 1112              		.align	2
 1113              		.global	ADC_SAR_Seq_1_CountsTo_uVolts
 1114              		.code	16
 1115              		.thumb_func
 1116              		.type	ADC_SAR_Seq_1_CountsTo_uVolts, %function
 1117              	ADC_SAR_Seq_1_CountsTo_uVolts:
 1118              	.LFB16:
 780:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 781:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 782:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 783:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_uVolts
 784:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 785:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 786:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 787:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function converts ADC counts to micro Volts
 788:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 789:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 790:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 791:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 792:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  adcCounts: Result from the ADC conversion
 793:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 794:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 795:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in uVolts
 796:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 797:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 798:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to uVolts.
 799:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 800:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 801:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 802:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Theory:
 803:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 804:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  number in the conversion to uVolts and at the same time not loose
 805:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  resolution.
 806:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 807:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  on 10 million and later divide on gain in counts per 10V.
 808:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 809:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 810:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     int32 ADC_SAR_Seq_1_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 811:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 35


 1119              		.loc 1 811 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 24
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123 0000 B0B5     		push	{r4, r5, r7, lr}
 1124              		.cfi_def_cfa_offset 16
 1125              		.cfi_offset 4, -16
 1126              		.cfi_offset 5, -12
 1127              		.cfi_offset 7, -8
 1128              		.cfi_offset 14, -4
 1129 0002 86B0     		sub	sp, sp, #24
 1130              		.cfi_def_cfa_offset 40
 1131 0004 00AF     		add	r7, sp, #0
 1132              		.cfi_def_cfa_register 7
 1133 0006 F860     		str	r0, [r7, #12]
 1134 0008 0A00     		movs	r2, r1
 1135 000a 0A23     		movs	r3, #10
 1136 000c FB18     		adds	r3, r7, r3
 1137 000e 1A80     		strh	r2, [r3]
 812:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         int64 uVolts;
 813:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 814:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 815:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1138              		.loc 1 815 0
 1139 0010 FB68     		ldr	r3, [r7, #12]
 1140 0012 012B     		cmp	r3, #1
 1141 0014 02D9     		bls	.L79
 1142              		.loc 1 815 0 is_stmt 0 discriminator 1
 1143 0016 0020     		movs	r0, #0
 1144 0018 FFF7FEFF 		bl	CyHalt
 1145              	.L79:
 816:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 817:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 818:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 819:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 1146              		.loc 1 819 0 is_stmt 1
 1147 001c 224B     		ldr	r3, .L83
 1148 001e FA68     		ldr	r2, [r7, #12]
 1149 0020 9200     		lsls	r2, r2, #2
 1150 0022 D258     		ldr	r2, [r2, r3]
 1151 0024 8023     		movs	r3, #128
 1152 0026 DB00     		lsls	r3, r3, #3
 1153 0028 1340     		ands	r3, r2
 1154 002a 0AD0     		beq	.L80
 820:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 821:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 1155              		.loc 1 821 0
 1156 002c 0A23     		movs	r3, #10
 1157 002e FA18     		adds	r2, r7, r3
 1158 0030 0A23     		movs	r3, #10
 1159 0032 FB18     		adds	r3, r7, r3
 1160 0034 0021     		movs	r1, #0
 1161 0036 5B5E     		ldrsh	r3, [r3, r1]
 1162 0038 002B     		cmp	r3, #0
 1163 003a 00DA     		bge	.L81
 1164 003c 0133     		adds	r3, r3, #1
 1165              	.L81:
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 36


 1166 003e 5B10     		asrs	r3, r3, #1
 1167 0040 1380     		strh	r3, [r2]
 1168              	.L80:
 822:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 823:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
 824:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 825:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 826:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1169              		.loc 1 826 0
 1170 0042 1A4B     		ldr	r3, .L83+4
 1171 0044 FA68     		ldr	r2, [r7, #12]
 1172 0046 5200     		lsls	r2, r2, #1
 1173 0048 D35A     		ldrh	r3, [r2, r3]
 1174 004a 19B2     		sxth	r1, r3
 1175 004c 0A23     		movs	r3, #10
 1176 004e FB18     		adds	r3, r7, r3
 1177 0050 1A88     		ldrh	r2, [r3]
 1178 0052 8BB2     		uxth	r3, r1
 1179 0054 D31A     		subs	r3, r2, r3
 1180 0056 9AB2     		uxth	r2, r3
 1181 0058 0A23     		movs	r3, #10
 1182 005a FB18     		adds	r3, r7, r3
 1183 005c 1A80     		strh	r2, [r3]
 827:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 828:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_1_10UV_COUNTS) / ADC_SAR_Seq_1_countsPer10Volt[cha
 1184              		.loc 1 828 0
 1185 005e 0A23     		movs	r3, #10
 1186 0060 FB18     		adds	r3, r7, r3
 1187 0062 1B88     		ldrh	r3, [r3]
 1188 0064 1BB2     		sxth	r3, r3
 1189 0066 3B60     		str	r3, [r7]
 1190 0068 DB17     		asrs	r3, r3, #31
 1191 006a 7B60     		str	r3, [r7, #4]
 1192 006c 104A     		ldr	r2, .L83+8
 1193 006e 0023     		movs	r3, #0
 1194 0070 3868     		ldr	r0, [r7]
 1195 0072 7968     		ldr	r1, [r7, #4]
 1196 0074 FFF7FEFF 		bl	__aeabi_lmul
 1197 0078 0200     		movs	r2, r0
 1198 007a 0B00     		movs	r3, r1
 1199 007c 1000     		movs	r0, r2
 1200 007e 1900     		movs	r1, r3
 1201 0080 0C4B     		ldr	r3, .L83+12
 1202 0082 FA68     		ldr	r2, [r7, #12]
 1203 0084 9200     		lsls	r2, r2, #2
 1204 0086 D358     		ldr	r3, [r2, r3]
 1205 0088 1C00     		movs	r4, r3
 1206 008a DB17     		asrs	r3, r3, #31
 1207 008c 1D00     		movs	r5, r3
 1208 008e 2200     		movs	r2, r4
 1209 0090 2B00     		movs	r3, r5
 1210 0092 FFF7FEFF 		bl	__aeabi_ldivmod
 1211 0096 0300     		movs	r3, r0
 1212 0098 0C00     		movs	r4, r1
 1213 009a 3B61     		str	r3, [r7, #16]
 1214 009c 7C61     		str	r4, [r7, #20]
 829:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 37


 830:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( (int32)uVolts );
 1215              		.loc 1 830 0
 1216 009e 3B69     		ldr	r3, [r7, #16]
 831:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1217              		.loc 1 831 0
 1218 00a0 1800     		movs	r0, r3
 1219 00a2 BD46     		mov	sp, r7
 1220 00a4 06B0     		add	sp, sp, #24
 1221              		@ sp needed
 1222 00a6 B0BD     		pop	{r4, r5, r7, pc}
 1223              	.L84:
 1224              		.align	2
 1225              	.L83:
 1226 00a8 00000000 		.word	ADC_SAR_Seq_1_channelsConfig
 1227 00ac 00000000 		.word	ADC_SAR_Seq_1_offset
 1228 00b0 80969800 		.word	10000000
 1229 00b4 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1230              		.cfi_endproc
 1231              	.LFE16:
 1232              		.size	ADC_SAR_Seq_1_CountsTo_uVolts, .-ADC_SAR_Seq_1_CountsTo_uVolts
 1233              		.global	__aeabi_i2f
 1234              		.global	__aeabi_fmul
 1235              		.global	__aeabi_fdiv
 1236              		.section	.text.ADC_SAR_Seq_1_CountsTo_Volts,"ax",%progbits
 1237              		.align	2
 1238              		.global	ADC_SAR_Seq_1_CountsTo_Volts
 1239              		.code	16
 1240              		.thumb_func
 1241              		.type	ADC_SAR_Seq_1_CountsTo_Volts, %function
 1242              	ADC_SAR_Seq_1_CountsTo_Volts:
 1243              	.LFB17:
 832:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 833:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 834:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     /*******************************************************************************
 835:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Function Name: ADC_SAR_Seq_1_CountsTo_Volts
 836:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     ********************************************************************************
 837:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 838:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Summary:
 839:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Converts the ADC output to Volts as a floating point number.
 840:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  This function is not available when left data format justification selected.
 841:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 842:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Parameters:
 843:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  chan: The ADC channel number.
 844:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Result from the ADC conversion
 845:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 846:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Return:
 847:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  Results in Volts
 848:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 849:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     * Global variables:
 850:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_countsPer10Volt:  used to convert ADC counts to Volts.
 851:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *  ADC_SAR_Seq_1_Offset:  Used as the offset while converting ADC counts
 852:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *   to mVolts.
 853:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *
 854:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     *******************************************************************************/
 855:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     float32 ADC_SAR_Seq_1_CountsTo_Volts(uint32 chan, int16 adcCounts)
 856:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     {
 1244              		.loc 1 856 0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 38


 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 16
 1247              		@ frame_needed = 1, uses_anonymous_args = 0
 1248 0000 90B5     		push	{r4, r7, lr}
 1249              		.cfi_def_cfa_offset 12
 1250              		.cfi_offset 4, -12
 1251              		.cfi_offset 7, -8
 1252              		.cfi_offset 14, -4
 1253 0002 85B0     		sub	sp, sp, #20
 1254              		.cfi_def_cfa_offset 32
 1255 0004 00AF     		add	r7, sp, #0
 1256              		.cfi_def_cfa_register 7
 1257 0006 7860     		str	r0, [r7, #4]
 1258 0008 0A00     		movs	r2, r1
 1259 000a BB1C     		adds	r3, r7, #2
 1260 000c 1A80     		strh	r2, [r3]
 857:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         float32 volts;
 858:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 859:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 860:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         CYASSERT(chan < ADC_SAR_Seq_1_TOTAL_CHANNELS_NUM);
 1261              		.loc 1 860 0
 1262 000e 7B68     		ldr	r3, [r7, #4]
 1263 0010 012B     		cmp	r3, #1
 1264 0012 02D9     		bls	.L86
 1265              		.loc 1 860 0 is_stmt 0 discriminator 1
 1266 0014 0020     		movs	r0, #0
 1267 0016 FFF7FEFF 		bl	CyHalt
 1268              	.L86:
 861:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 862:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 863:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #if(ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE)
 864:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             if((ADC_SAR_Seq_1_channelsConfig[chan] & ADC_SAR_Seq_1_AVERAGING_EN) != 0u)
 1269              		.loc 1 864 0 is_stmt 1
 1270 001a 1E4B     		ldr	r3, .L90
 1271 001c 7A68     		ldr	r2, [r7, #4]
 1272 001e 9200     		lsls	r2, r2, #2
 1273 0020 D258     		ldr	r2, [r2, r3]
 1274 0022 8023     		movs	r3, #128
 1275 0024 DB00     		lsls	r3, r3, #3
 1276 0026 1340     		ands	r3, r2
 1277 0028 08D0     		beq	.L87
 865:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             {
 866:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****                 adcCounts /= ADC_SAR_Seq_1_DEFAULT_AVG_SAMPLES_DIV;
 1278              		.loc 1 866 0
 1279 002a BA1C     		adds	r2, r7, #2
 1280 002c BB1C     		adds	r3, r7, #2
 1281 002e 0021     		movs	r1, #0
 1282 0030 5B5E     		ldrsh	r3, [r3, r1]
 1283 0032 002B     		cmp	r3, #0
 1284 0034 00DA     		bge	.L88
 1285 0036 0133     		adds	r3, r3, #1
 1286              	.L88:
 1287 0038 5B10     		asrs	r3, r3, #1
 1288 003a 1380     		strh	r3, [r2]
 1289              	.L87:
 867:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****             }
 868:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         #endif /* ADC_SAR_Seq_1_DEFAULT_AVG_MODE == ADC_SAR_Seq_1__ACCUMULATE */
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 39


 869:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 870:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         /* Subtract ADC offset */
 871:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         adcCounts -= ADC_SAR_Seq_1_offset[chan];
 1290              		.loc 1 871 0
 1291 003c 164B     		ldr	r3, .L90+4
 1292 003e 7A68     		ldr	r2, [r7, #4]
 1293 0040 5200     		lsls	r2, r2, #1
 1294 0042 D35A     		ldrh	r3, [r2, r3]
 1295 0044 19B2     		sxth	r1, r3
 1296 0046 BB1C     		adds	r3, r7, #2
 1297 0048 1A88     		ldrh	r2, [r3]
 1298 004a 8BB2     		uxth	r3, r1
 1299 004c D31A     		subs	r3, r2, r3
 1300 004e 9AB2     		uxth	r2, r3
 1301 0050 BB1C     		adds	r3, r7, #2
 1302 0052 1A80     		strh	r2, [r3]
 872:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 873:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_1_10V_COUNTS) / (float32)ADC_SAR_Seq_1_countsPer1
 1303              		.loc 1 873 0
 1304 0054 BB1C     		adds	r3, r7, #2
 1305 0056 0022     		movs	r2, #0
 1306 0058 9B5E     		ldrsh	r3, [r3, r2]
 1307 005a 1800     		movs	r0, r3
 1308 005c FFF7FEFF 		bl	__aeabi_i2f
 1309 0060 031C     		adds	r3, r0, #0
 1310 0062 0E49     		ldr	r1, .L90+8
 1311 0064 181C     		adds	r0, r3, #0
 1312 0066 FFF7FEFF 		bl	__aeabi_fmul
 1313 006a 031C     		adds	r3, r0, #0
 1314 006c 1C1C     		adds	r4, r3, #0
 1315 006e 0C4B     		ldr	r3, .L90+12
 1316 0070 7A68     		ldr	r2, [r7, #4]
 1317 0072 9200     		lsls	r2, r2, #2
 1318 0074 D358     		ldr	r3, [r2, r3]
 1319 0076 1800     		movs	r0, r3
 1320 0078 FFF7FEFF 		bl	__aeabi_i2f
 1321 007c 031C     		adds	r3, r0, #0
 1322 007e 191C     		adds	r1, r3, #0
 1323 0080 201C     		adds	r0, r4, #0
 1324 0082 FFF7FEFF 		bl	__aeabi_fdiv
 1325 0086 031C     		adds	r3, r0, #0
 1326 0088 FB60     		str	r3, [r7, #12]
 874:Generated_Source\PSoC4/ADC_SAR_Seq_1.c **** 
 875:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****         return( volts );
 1327              		.loc 1 875 0
 1328 008a FB68     		ldr	r3, [r7, #12]
 876:Generated_Source\PSoC4/ADC_SAR_Seq_1.c ****     }
 1329              		.loc 1 876 0
 1330 008c 181C     		adds	r0, r3, #0
 1331 008e BD46     		mov	sp, r7
 1332 0090 05B0     		add	sp, sp, #20
 1333              		@ sp needed
 1334 0092 90BD     		pop	{r4, r7, pc}
 1335              	.L91:
 1336              		.align	2
 1337              	.L90:
 1338 0094 00000000 		.word	ADC_SAR_Seq_1_channelsConfig
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 40


 1339 0098 00000000 		.word	ADC_SAR_Seq_1_offset
 1340 009c 00002041 		.word	1092616192
 1341 00a0 00000000 		.word	ADC_SAR_Seq_1_countsPer10Volt
 1342              		.cfi_endproc
 1343              	.LFE17:
 1344              		.size	ADC_SAR_Seq_1_CountsTo_Volts, .-ADC_SAR_Seq_1_CountsTo_Volts
 1345              		.section	.rodata
 1346              		.align	2
 1347              		.type	ADC_SAR_Seq_1_InputsPlacement.4874, %object
 1348              		.size	ADC_SAR_Seq_1_InputsPlacement.4874, 2
 1349              	ADC_SAR_Seq_1_InputsPlacement.4874:
 1350 0008 06       		.byte	6
 1351 0009 01       		.byte	1
 1352              		.text
 1353              	.Letext0:
 1354              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 1355              		.section	.debug_info,"",%progbits
 1356              	.Ldebug_info0:
 1357 0000 B8040000 		.4byte	0x4b8
 1358 0004 0400     		.2byte	0x4
 1359 0006 00000000 		.4byte	.Ldebug_abbrev0
 1360 000a 04       		.byte	0x4
 1361 000b 01       		.uleb128 0x1
 1362 000c 07020000 		.4byte	.LASF61
 1363 0010 0C       		.byte	0xc
 1364 0011 06030000 		.4byte	.LASF62
 1365 0015 74030000 		.4byte	.LASF63
 1366 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1367 001d 00000000 		.4byte	0
 1368 0021 00000000 		.4byte	.Ldebug_line0
 1369 0025 02       		.uleb128 0x2
 1370 0026 01       		.byte	0x1
 1371 0027 06       		.byte	0x6
 1372 0028 F8000000 		.4byte	.LASF0
 1373 002c 02       		.uleb128 0x2
 1374 002d 01       		.byte	0x1
 1375 002e 08       		.byte	0x8
 1376 002f 66030000 		.4byte	.LASF1
 1377 0033 02       		.uleb128 0x2
 1378 0034 02       		.byte	0x2
 1379 0035 05       		.byte	0x5
 1380 0036 A4030000 		.4byte	.LASF2
 1381 003a 02       		.uleb128 0x2
 1382 003b 02       		.byte	0x2
 1383 003c 07       		.byte	0x7
 1384 003d D7010000 		.4byte	.LASF3
 1385 0041 02       		.uleb128 0x2
 1386 0042 04       		.byte	0x4
 1387 0043 05       		.byte	0x5
 1388 0044 43010000 		.4byte	.LASF4
 1389 0048 02       		.uleb128 0x2
 1390 0049 04       		.byte	0x4
 1391 004a 07       		.byte	0x7
 1392 004b B5010000 		.4byte	.LASF5
 1393 004f 02       		.uleb128 0x2
 1394 0050 08       		.byte	0x8
 1395 0051 05       		.byte	0x5
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 41


 1396 0052 EA000000 		.4byte	.LASF6
 1397 0056 02       		.uleb128 0x2
 1398 0057 08       		.byte	0x8
 1399 0058 07       		.byte	0x7
 1400 0059 86000000 		.4byte	.LASF7
 1401 005d 03       		.uleb128 0x3
 1402 005e 04       		.byte	0x4
 1403 005f 05       		.byte	0x5
 1404 0060 696E7400 		.ascii	"int\000"
 1405 0064 02       		.uleb128 0x2
 1406 0065 04       		.byte	0x4
 1407 0066 07       		.byte	0x7
 1408 0067 A1010000 		.4byte	.LASF8
 1409 006b 04       		.uleb128 0x4
 1410 006c 4C010000 		.4byte	.LASF9
 1411 0070 02       		.byte	0x2
 1412 0071 E401     		.2byte	0x1e4
 1413 0073 2C000000 		.4byte	0x2c
 1414 0077 04       		.uleb128 0x4
 1415 0078 15000000 		.4byte	.LASF10
 1416 007c 02       		.byte	0x2
 1417 007d E501     		.2byte	0x1e5
 1418 007f 3A000000 		.4byte	0x3a
 1419 0083 04       		.uleb128 0x4
 1420 0084 59010000 		.4byte	.LASF11
 1421 0088 02       		.byte	0x2
 1422 0089 E601     		.2byte	0x1e6
 1423 008b 48000000 		.4byte	0x48
 1424 008f 04       		.uleb128 0x4
 1425 0090 5D040000 		.4byte	.LASF12
 1426 0094 02       		.byte	0x2
 1427 0095 E801     		.2byte	0x1e8
 1428 0097 33000000 		.4byte	0x33
 1429 009b 04       		.uleb128 0x4
 1430 009c 1F010000 		.4byte	.LASF13
 1431 00a0 02       		.byte	0x2
 1432 00a1 E901     		.2byte	0x1e9
 1433 00a3 41000000 		.4byte	0x41
 1434 00a7 04       		.uleb128 0x4
 1435 00a8 A2020000 		.4byte	.LASF14
 1436 00ac 02       		.byte	0x2
 1437 00ad EA01     		.2byte	0x1ea
 1438 00af B3000000 		.4byte	0xb3
 1439 00b3 02       		.uleb128 0x2
 1440 00b4 04       		.byte	0x4
 1441 00b5 04       		.byte	0x4
 1442 00b6 2D030000 		.4byte	.LASF15
 1443 00ba 02       		.uleb128 0x2
 1444 00bb 08       		.byte	0x8
 1445 00bc 04       		.byte	0x4
 1446 00bd 52010000 		.4byte	.LASF16
 1447 00c1 04       		.uleb128 0x4
 1448 00c2 00030000 		.4byte	.LASF17
 1449 00c6 02       		.byte	0x2
 1450 00c7 EF01     		.2byte	0x1ef
 1451 00c9 4F000000 		.4byte	0x4f
 1452 00cd 02       		.uleb128 0x2
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 42


 1453 00ce 01       		.byte	0x1
 1454 00cf 08       		.byte	0x8
 1455 00d0 F0030000 		.4byte	.LASF18
 1456 00d4 04       		.uleb128 0x4
 1457 00d5 9C020000 		.4byte	.LASF19
 1458 00d9 02       		.byte	0x2
 1459 00da 9002     		.2byte	0x290
 1460 00dc E0000000 		.4byte	0xe0
 1461 00e0 05       		.uleb128 0x5
 1462 00e1 83000000 		.4byte	0x83
 1463 00e5 02       		.uleb128 0x2
 1464 00e6 08       		.byte	0x8
 1465 00e7 04       		.byte	0x4
 1466 00e8 BC020000 		.4byte	.LASF20
 1467 00ec 02       		.uleb128 0x2
 1468 00ed 04       		.byte	0x4
 1469 00ee 07       		.byte	0x7
 1470 00ef AA020000 		.4byte	.LASF21
 1471 00f3 06       		.uleb128 0x6
 1472 00f4 72000000 		.4byte	.LASF26
 1473 00f8 01       		.byte	0x1
 1474 00f9 3F       		.byte	0x3f
 1475 00fa 00000000 		.4byte	.LFB0
 1476 00fe 24000000 		.4byte	.LFE0-.LFB0
 1477 0102 01       		.uleb128 0x1
 1478 0103 9C       		.byte	0x9c
 1479 0104 07       		.uleb128 0x7
 1480 0105 1C000000 		.4byte	.LASF37
 1481 0109 01       		.byte	0x1
 1482 010a 5E       		.byte	0x5e
 1483 010b 00000000 		.4byte	.LFB1
 1484 010f F0010000 		.4byte	.LFE1-.LFB1
 1485 0113 01       		.uleb128 0x1
 1486 0114 9C       		.byte	0x9c
 1487 0115 55010000 		.4byte	0x155
 1488 0119 08       		.uleb128 0x8
 1489 011a E5030000 		.4byte	.LASF22
 1490 011e 01       		.byte	0x1
 1491 011f 60       		.byte	0x60
 1492 0120 83000000 		.4byte	0x83
 1493 0124 02       		.uleb128 0x2
 1494 0125 91       		.byte	0x91
 1495 0126 74       		.sleb128 -12
 1496 0127 08       		.uleb128 0x8
 1497 0128 CD010000 		.4byte	.LASF23
 1498 012c 01       		.byte	0x1
 1499 012d 61       		.byte	0x61
 1500 012e 83000000 		.4byte	0x83
 1501 0132 02       		.uleb128 0x2
 1502 0133 91       		.byte	0x91
 1503 0134 6C       		.sleb128 -20
 1504 0135 08       		.uleb128 0x8
 1505 0136 37000000 		.4byte	.LASF24
 1506 013a 01       		.byte	0x1
 1507 013b 62       		.byte	0x62
 1508 013c 9B000000 		.4byte	0x9b
 1509 0140 02       		.uleb128 0x2
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 43


 1510 0141 91       		.byte	0x91
 1511 0142 70       		.sleb128 -16
 1512 0143 08       		.uleb128 0x8
 1513 0144 B2000000 		.4byte	.LASF25
 1514 0148 01       		.byte	0x1
 1515 0149 65       		.byte	0x65
 1516 014a 6A010000 		.4byte	0x16a
 1517 014e 05       		.uleb128 0x5
 1518 014f 03       		.byte	0x3
 1519 0150 08000000 		.4byte	ADC_SAR_Seq_1_InputsPlacement.4874
 1520 0154 00       		.byte	0
 1521 0155 09       		.uleb128 0x9
 1522 0156 65010000 		.4byte	0x165
 1523 015a 65010000 		.4byte	0x165
 1524 015e 0A       		.uleb128 0xa
 1525 015f EC000000 		.4byte	0xec
 1526 0163 01       		.byte	0x1
 1527 0164 00       		.byte	0
 1528 0165 0B       		.uleb128 0xb
 1529 0166 6B000000 		.4byte	0x6b
 1530 016a 0B       		.uleb128 0xb
 1531 016b 55010000 		.4byte	0x155
 1532 016f 0C       		.uleb128 0xc
 1533 0170 9D000000 		.4byte	.LASF27
 1534 0174 01       		.byte	0x1
 1535 0175 4A01     		.2byte	0x14a
 1536 0177 00000000 		.4byte	.LFB2
 1537 017b 2C000000 		.4byte	.LFE2-.LFB2
 1538 017f 01       		.uleb128 0x1
 1539 0180 9C       		.byte	0x9c
 1540 0181 0D       		.uleb128 0xd
 1541 0182 49030000 		.4byte	.LASF28
 1542 0186 01       		.byte	0x1
 1543 0187 6D01     		.2byte	0x16d
 1544 0189 00000000 		.4byte	.LFB3
 1545 018d 1C000000 		.4byte	.LFE3-.LFB3
 1546 0191 01       		.uleb128 0x1
 1547 0192 9C       		.byte	0x9c
 1548 0193 0D       		.uleb128 0xd
 1549 0194 3E000000 		.4byte	.LASF29
 1550 0198 01       		.byte	0x1
 1551 0199 8701     		.2byte	0x187
 1552 019b 00000000 		.4byte	.LFB4
 1553 019f 14000000 		.4byte	.LFE4-.LFB4
 1554 01a3 01       		.uleb128 0x1
 1555 01a4 9C       		.byte	0x9c
 1556 01a5 0D       		.uleb128 0xd
 1557 01a6 E6020000 		.4byte	.LASF30
 1558 01aa 01       		.byte	0x1
 1559 01ab A001     		.2byte	0x1a0
 1560 01ad 00000000 		.4byte	.LFB5
 1561 01b1 0A000000 		.4byte	.LFE5-.LFB5
 1562 01b5 01       		.uleb128 0x1
 1563 01b6 9C       		.byte	0x9c
 1564 01b7 0E       		.uleb128 0xe
 1565 01b8 C8020000 		.4byte	.LASF32
 1566 01bc 01       		.byte	0x1
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 44


 1567 01bd C201     		.2byte	0x1c2
 1568 01bf 83000000 		.4byte	0x83
 1569 01c3 00000000 		.4byte	.LFB6
 1570 01c7 48000000 		.4byte	.LFE6-.LFB6
 1571 01cb 01       		.uleb128 0x1
 1572 01cc 9C       		.byte	0x9c
 1573 01cd F0010000 		.4byte	0x1f0
 1574 01d1 0F       		.uleb128 0xf
 1575 01d2 83010000 		.4byte	.LASF34
 1576 01d6 01       		.byte	0x1
 1577 01d7 C201     		.2byte	0x1c2
 1578 01d9 83000000 		.4byte	0x83
 1579 01dd 02       		.uleb128 0x2
 1580 01de 91       		.byte	0x91
 1581 01df 6C       		.sleb128 -20
 1582 01e0 10       		.uleb128 0x10
 1583 01e1 3E040000 		.4byte	.LASF31
 1584 01e5 01       		.byte	0x1
 1585 01e6 C401     		.2byte	0x1c4
 1586 01e8 83000000 		.4byte	0x83
 1587 01ec 02       		.uleb128 0x2
 1588 01ed 91       		.byte	0x91
 1589 01ee 74       		.sleb128 -12
 1590 01ef 00       		.byte	0
 1591 01f0 11       		.uleb128 0x11
 1592 01f1 D0000000 		.4byte	.LASF33
 1593 01f5 01       		.byte	0x1
 1594 01f6 F801     		.2byte	0x1f8
 1595 01f8 8F000000 		.4byte	0x8f
 1596 01fc 00000000 		.4byte	.LFB7
 1597 0200 44000000 		.4byte	.LFE7-.LFB7
 1598 0204 01       		.uleb128 0x1
 1599 0205 9C       		.byte	0x9c
 1600 0206 29020000 		.4byte	0x229
 1601 020a 0F       		.uleb128 0xf
 1602 020b EB030000 		.4byte	.LASF35
 1603 020f 01       		.byte	0x1
 1604 0210 F801     		.2byte	0x1f8
 1605 0212 83000000 		.4byte	0x83
 1606 0216 02       		.uleb128 0x2
 1607 0217 91       		.byte	0x91
 1608 0218 6C       		.sleb128 -20
 1609 0219 10       		.uleb128 0x10
 1610 021a 7E040000 		.4byte	.LASF36
 1611 021e 01       		.byte	0x1
 1612 021f FA01     		.2byte	0x1fa
 1613 0221 83000000 		.4byte	0x83
 1614 0225 02       		.uleb128 0x2
 1615 0226 91       		.byte	0x91
 1616 0227 74       		.sleb128 -12
 1617 0228 00       		.byte	0
 1618 0229 12       		.uleb128 0x12
 1619 022a CB030000 		.4byte	.LASF38
 1620 022e 01       		.byte	0x1
 1621 022f 2502     		.2byte	0x225
 1622 0231 00000000 		.4byte	.LFB8
 1623 0235 20000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 45


 1624 0239 01       		.uleb128 0x1
 1625 023a 9C       		.byte	0x9c
 1626 023b 4F020000 		.4byte	0x24f
 1627 023f 0F       		.uleb128 0xf
 1628 0240 60010000 		.4byte	.LASF39
 1629 0244 01       		.byte	0x1
 1630 0245 2502     		.2byte	0x225
 1631 0247 83000000 		.4byte	0x83
 1632 024b 02       		.uleb128 0x2
 1633 024c 91       		.byte	0x91
 1634 024d 74       		.sleb128 -12
 1635 024e 00       		.byte	0
 1636 024f 12       		.uleb128 0x12
 1637 0250 F5030000 		.4byte	.LASF40
 1638 0254 01       		.byte	0x1
 1639 0255 5102     		.2byte	0x251
 1640 0257 00000000 		.4byte	.LFB9
 1641 025b 30000000 		.4byte	.LFE9-.LFB9
 1642 025f 01       		.uleb128 0x1
 1643 0260 9C       		.byte	0x9c
 1644 0261 75020000 		.4byte	0x275
 1645 0265 0F       		.uleb128 0xf
 1646 0266 B3020000 		.4byte	.LASF41
 1647 026a 01       		.byte	0x1
 1648 026b 5102     		.2byte	0x251
 1649 026d 83000000 		.4byte	0x83
 1650 0271 02       		.uleb128 0x2
 1651 0272 91       		.byte	0x91
 1652 0273 74       		.sleb128 -12
 1653 0274 00       		.byte	0
 1654 0275 12       		.uleb128 0x12
 1655 0276 04010000 		.4byte	.LASF42
 1656 027a 01       		.byte	0x1
 1657 027b 6602     		.2byte	0x266
 1658 027d 00000000 		.4byte	.LFB10
 1659 0281 30000000 		.4byte	.LFE10-.LFB10
 1660 0285 01       		.uleb128 0x1
 1661 0286 9C       		.byte	0x9c
 1662 0287 9B020000 		.4byte	0x29b
 1663 028b 0F       		.uleb128 0xf
 1664 028c 5C030000 		.4byte	.LASF43
 1665 0290 01       		.byte	0x1
 1666 0291 6602     		.2byte	0x266
 1667 0293 83000000 		.4byte	0x83
 1668 0297 02       		.uleb128 0x2
 1669 0298 91       		.byte	0x91
 1670 0299 74       		.sleb128 -12
 1671 029a 00       		.byte	0
 1672 029b 12       		.uleb128 0x12
 1673 029c 63040000 		.4byte	.LASF44
 1674 02a0 01       		.byte	0x1
 1675 02a1 7E02     		.2byte	0x27e
 1676 02a3 00000000 		.4byte	.LFB11
 1677 02a7 20000000 		.4byte	.LFE11-.LFB11
 1678 02ab 01       		.uleb128 0x1
 1679 02ac 9C       		.byte	0x9c
 1680 02ad C1020000 		.4byte	0x2c1
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 46


 1681 02b1 0F       		.uleb128 0xf
 1682 02b2 60010000 		.4byte	.LASF39
 1683 02b6 01       		.byte	0x1
 1684 02b7 7E02     		.2byte	0x27e
 1685 02b9 83000000 		.4byte	0x83
 1686 02bd 02       		.uleb128 0x2
 1687 02be 91       		.byte	0x91
 1688 02bf 74       		.sleb128 -12
 1689 02c0 00       		.byte	0
 1690 02c1 12       		.uleb128 0x12
 1691 02c2 59000000 		.4byte	.LASF45
 1692 02c6 01       		.byte	0x1
 1693 02c7 9502     		.2byte	0x295
 1694 02c9 00000000 		.4byte	.LFB12
 1695 02cd 20000000 		.4byte	.LFE12-.LFB12
 1696 02d1 01       		.uleb128 0x1
 1697 02d2 9C       		.byte	0x9c
 1698 02d3 E7020000 		.4byte	0x2e7
 1699 02d7 0F       		.uleb128 0xf
 1700 02d8 60010000 		.4byte	.LASF39
 1701 02dc 01       		.byte	0x1
 1702 02dd 9502     		.2byte	0x295
 1703 02df 83000000 		.4byte	0x83
 1704 02e3 02       		.uleb128 0x2
 1705 02e4 91       		.byte	0x91
 1706 02e5 74       		.sleb128 -12
 1707 02e6 00       		.byte	0
 1708 02e7 13       		.uleb128 0x13
 1709 02e8 45040000 		.4byte	.LASF46
 1710 02ec 01       		.byte	0x1
 1711 02ed B102     		.2byte	0x2b1
 1712 02ef 00000000 		.4byte	.LFB13
 1713 02f3 34000000 		.4byte	.LFE13-.LFB13
 1714 02f7 01       		.uleb128 0x1
 1715 02f8 9C       		.byte	0x9c
 1716 02f9 1C030000 		.4byte	0x31c
 1717 02fd 0F       		.uleb128 0xf
 1718 02fe EB030000 		.4byte	.LASF35
 1719 0302 01       		.byte	0x1
 1720 0303 B102     		.2byte	0x2b1
 1721 0305 83000000 		.4byte	0x83
 1722 0309 02       		.uleb128 0x2
 1723 030a 91       		.byte	0x91
 1724 030b 74       		.sleb128 -12
 1725 030c 0F       		.uleb128 0xf
 1726 030d 0F040000 		.4byte	.LASF47
 1727 0311 01       		.byte	0x1
 1728 0312 B102     		.2byte	0x2b1
 1729 0314 8F000000 		.4byte	0x8f
 1730 0318 02       		.uleb128 0x2
 1731 0319 91       		.byte	0x91
 1732 031a 72       		.sleb128 -14
 1733 031b 00       		.byte	0
 1734 031c 13       		.uleb128 0x13
 1735 031d 33030000 		.4byte	.LASF48
 1736 0321 01       		.byte	0x1
 1737 0322 D302     		.2byte	0x2d3
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 47


 1738 0324 00000000 		.4byte	.LFB14
 1739 0328 2C000000 		.4byte	.LFE14-.LFB14
 1740 032c 01       		.uleb128 0x1
 1741 032d 9C       		.byte	0x9c
 1742 032e 51030000 		.4byte	0x351
 1743 0332 0F       		.uleb128 0xf
 1744 0333 EB030000 		.4byte	.LASF35
 1745 0337 01       		.byte	0x1
 1746 0338 D302     		.2byte	0x2d3
 1747 033a 83000000 		.4byte	0x83
 1748 033e 02       		.uleb128 0x2
 1749 033f 91       		.byte	0x91
 1750 0340 74       		.sleb128 -12
 1751 0341 0F       		.uleb128 0xf
 1752 0342 2F000000 		.4byte	.LASF49
 1753 0346 01       		.byte	0x1
 1754 0347 D302     		.2byte	0x2d3
 1755 0349 9B000000 		.4byte	0x9b
 1756 034d 02       		.uleb128 0x2
 1757 034e 91       		.byte	0x91
 1758 034f 70       		.sleb128 -16
 1759 0350 00       		.byte	0
 1760 0351 11       		.uleb128 0x11
 1761 0352 65010000 		.4byte	.LASF50
 1762 0356 01       		.byte	0x1
 1763 0357 F402     		.2byte	0x2f4
 1764 0359 8F000000 		.4byte	0x8f
 1765 035d 00000000 		.4byte	.LFB15
 1766 0361 C8000000 		.4byte	.LFE15-.LFB15
 1767 0365 01       		.uleb128 0x1
 1768 0366 9C       		.byte	0x9c
 1769 0367 99030000 		.4byte	0x399
 1770 036b 0F       		.uleb128 0xf
 1771 036c EB030000 		.4byte	.LASF35
 1772 0370 01       		.byte	0x1
 1773 0371 F402     		.2byte	0x2f4
 1774 0373 83000000 		.4byte	0x83
 1775 0377 02       		.uleb128 0x2
 1776 0378 91       		.byte	0x91
 1777 0379 6C       		.sleb128 -20
 1778 037a 0F       		.uleb128 0xf
 1779 037b 16040000 		.4byte	.LASF51
 1780 037f 01       		.byte	0x1
 1781 0380 F402     		.2byte	0x2f4
 1782 0382 8F000000 		.4byte	0x8f
 1783 0386 02       		.uleb128 0x2
 1784 0387 91       		.byte	0x91
 1785 0388 6A       		.sleb128 -22
 1786 0389 10       		.uleb128 0x10
 1787 038a 95020000 		.4byte	.LASF52
 1788 038e 01       		.byte	0x1
 1789 038f F602     		.2byte	0x2f6
 1790 0391 8F000000 		.4byte	0x8f
 1791 0395 02       		.uleb128 0x2
 1792 0396 91       		.byte	0x91
 1793 0397 76       		.sleb128 -10
 1794 0398 00       		.byte	0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 48


 1795 0399 11       		.uleb128 0x11
 1796 039a 25010000 		.4byte	.LASF53
 1797 039e 01       		.byte	0x1
 1798 039f 2A03     		.2byte	0x32a
 1799 03a1 9B000000 		.4byte	0x9b
 1800 03a5 00000000 		.4byte	.LFB16
 1801 03a9 B8000000 		.4byte	.LFE16-.LFB16
 1802 03ad 01       		.uleb128 0x1
 1803 03ae 9C       		.byte	0x9c
 1804 03af E1030000 		.4byte	0x3e1
 1805 03b3 0F       		.uleb128 0xf
 1806 03b4 EB030000 		.4byte	.LASF35
 1807 03b8 01       		.byte	0x1
 1808 03b9 2A03     		.2byte	0x32a
 1809 03bb 83000000 		.4byte	0x83
 1810 03bf 02       		.uleb128 0x2
 1811 03c0 91       		.byte	0x91
 1812 03c1 64       		.sleb128 -28
 1813 03c2 0F       		.uleb128 0xf
 1814 03c3 16040000 		.4byte	.LASF51
 1815 03c7 01       		.byte	0x1
 1816 03c8 2A03     		.2byte	0x32a
 1817 03ca 8F000000 		.4byte	0x8f
 1818 03ce 02       		.uleb128 0x2
 1819 03cf 91       		.byte	0x91
 1820 03d0 62       		.sleb128 -30
 1821 03d1 10       		.uleb128 0x10
 1822 03d2 AE010000 		.4byte	.LASF54
 1823 03d6 01       		.byte	0x1
 1824 03d7 2C03     		.2byte	0x32c
 1825 03d9 C1000000 		.4byte	0xc1
 1826 03dd 02       		.uleb128 0x2
 1827 03de 91       		.byte	0x91
 1828 03df 68       		.sleb128 -24
 1829 03e0 00       		.byte	0
 1830 03e1 11       		.uleb128 0x11
 1831 03e2 AE030000 		.4byte	.LASF55
 1832 03e6 01       		.byte	0x1
 1833 03e7 5703     		.2byte	0x357
 1834 03e9 A7000000 		.4byte	0xa7
 1835 03ed 00000000 		.4byte	.LFB17
 1836 03f1 A4000000 		.4byte	.LFE17-.LFB17
 1837 03f5 01       		.uleb128 0x1
 1838 03f6 9C       		.byte	0x9c
 1839 03f7 29040000 		.4byte	0x429
 1840 03fb 0F       		.uleb128 0xf
 1841 03fc EB030000 		.4byte	.LASF35
 1842 0400 01       		.byte	0x1
 1843 0401 5703     		.2byte	0x357
 1844 0403 83000000 		.4byte	0x83
 1845 0407 02       		.uleb128 0x2
 1846 0408 91       		.byte	0x91
 1847 0409 64       		.sleb128 -28
 1848 040a 0F       		.uleb128 0xf
 1849 040b 16040000 		.4byte	.LASF51
 1850 040f 01       		.byte	0x1
 1851 0410 5703     		.2byte	0x357
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 49


 1852 0412 8F000000 		.4byte	0x8f
 1853 0416 02       		.uleb128 0x2
 1854 0417 91       		.byte	0x91
 1855 0418 62       		.sleb128 -30
 1856 0419 10       		.uleb128 0x10
 1857 041a C7010000 		.4byte	.LASF56
 1858 041e 01       		.byte	0x1
 1859 041f 5903     		.2byte	0x359
 1860 0421 A7000000 		.4byte	0xa7
 1861 0425 02       		.uleb128 0x2
 1862 0426 91       		.byte	0x91
 1863 0427 6C       		.sleb128 -20
 1864 0428 00       		.byte	0
 1865 0429 09       		.uleb128 0x9
 1866 042a 39040000 		.4byte	0x439
 1867 042e 39040000 		.4byte	0x439
 1868 0432 0A       		.uleb128 0xa
 1869 0433 EC000000 		.4byte	0xec
 1870 0437 01       		.byte	0x1
 1871 0438 00       		.byte	0
 1872 0439 0B       		.uleb128 0xb
 1873 043a 83000000 		.4byte	0x83
 1874 043e 08       		.uleb128 0x8
 1875 043f EA010000 		.4byte	.LASF57
 1876 0443 01       		.byte	0x1
 1877 0444 21       		.byte	0x21
 1878 0445 4F040000 		.4byte	0x44f
 1879 0449 05       		.uleb128 0x5
 1880 044a 03       		.byte	0x3
 1881 044b 00000000 		.4byte	ADC_SAR_Seq_1_channelsConfig
 1882 044f 0B       		.uleb128 0xb
 1883 0450 29040000 		.4byte	0x429
 1884 0454 14       		.uleb128 0x14
 1885 0455 8B010000 		.4byte	.LASF58
 1886 0459 01       		.byte	0x1
 1887 045a 18       		.byte	0x18
 1888 045b 6B000000 		.4byte	0x6b
 1889 045f 05       		.uleb128 0x5
 1890 0460 03       		.byte	0x3
 1891 0461 00000000 		.4byte	ADC_SAR_Seq_1_initVar
 1892 0465 09       		.uleb128 0x9
 1893 0466 75040000 		.4byte	0x475
 1894 046a 75040000 		.4byte	0x475
 1895 046e 0A       		.uleb128 0xa
 1896 046f EC000000 		.4byte	0xec
 1897 0473 01       		.byte	0x1
 1898 0474 00       		.byte	0
 1899 0475 05       		.uleb128 0x5
 1900 0476 8F000000 		.4byte	0x8f
 1901 047a 14       		.uleb128 0x14
 1902 047b 00000000 		.4byte	.LASF59
 1903 047f 01       		.byte	0x1
 1904 0480 19       		.byte	0x19
 1905 0481 8B040000 		.4byte	0x48b
 1906 0485 05       		.uleb128 0x5
 1907 0486 03       		.byte	0x3
 1908 0487 00000000 		.4byte	ADC_SAR_Seq_1_offset
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 50


 1909 048b 05       		.uleb128 0x5
 1910 048c 65040000 		.4byte	0x465
 1911 0490 09       		.uleb128 0x9
 1912 0491 A0040000 		.4byte	0x4a0
 1913 0495 A0040000 		.4byte	0x4a0
 1914 0499 0A       		.uleb128 0xa
 1915 049a EC000000 		.4byte	0xec
 1916 049e 01       		.byte	0x1
 1917 049f 00       		.byte	0
 1918 04a0 05       		.uleb128 0x5
 1919 04a1 9B000000 		.4byte	0x9b
 1920 04a5 14       		.uleb128 0x14
 1921 04a6 20040000 		.4byte	.LASF60
 1922 04aa 01       		.byte	0x1
 1923 04ab 1A       		.byte	0x1a
 1924 04ac B6040000 		.4byte	0x4b6
 1925 04b0 05       		.uleb128 0x5
 1926 04b1 03       		.byte	0x3
 1927 04b2 00000000 		.4byte	ADC_SAR_Seq_1_countsPer10Volt
 1928 04b6 05       		.uleb128 0x5
 1929 04b7 90040000 		.4byte	0x490
 1930 04bb 00       		.byte	0
 1931              		.section	.debug_abbrev,"",%progbits
 1932              	.Ldebug_abbrev0:
 1933 0000 01       		.uleb128 0x1
 1934 0001 11       		.uleb128 0x11
 1935 0002 01       		.byte	0x1
 1936 0003 25       		.uleb128 0x25
 1937 0004 0E       		.uleb128 0xe
 1938 0005 13       		.uleb128 0x13
 1939 0006 0B       		.uleb128 0xb
 1940 0007 03       		.uleb128 0x3
 1941 0008 0E       		.uleb128 0xe
 1942 0009 1B       		.uleb128 0x1b
 1943 000a 0E       		.uleb128 0xe
 1944 000b 55       		.uleb128 0x55
 1945 000c 17       		.uleb128 0x17
 1946 000d 11       		.uleb128 0x11
 1947 000e 01       		.uleb128 0x1
 1948 000f 10       		.uleb128 0x10
 1949 0010 17       		.uleb128 0x17
 1950 0011 00       		.byte	0
 1951 0012 00       		.byte	0
 1952 0013 02       		.uleb128 0x2
 1953 0014 24       		.uleb128 0x24
 1954 0015 00       		.byte	0
 1955 0016 0B       		.uleb128 0xb
 1956 0017 0B       		.uleb128 0xb
 1957 0018 3E       		.uleb128 0x3e
 1958 0019 0B       		.uleb128 0xb
 1959 001a 03       		.uleb128 0x3
 1960 001b 0E       		.uleb128 0xe
 1961 001c 00       		.byte	0
 1962 001d 00       		.byte	0
 1963 001e 03       		.uleb128 0x3
 1964 001f 24       		.uleb128 0x24
 1965 0020 00       		.byte	0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 51


 1966 0021 0B       		.uleb128 0xb
 1967 0022 0B       		.uleb128 0xb
 1968 0023 3E       		.uleb128 0x3e
 1969 0024 0B       		.uleb128 0xb
 1970 0025 03       		.uleb128 0x3
 1971 0026 08       		.uleb128 0x8
 1972 0027 00       		.byte	0
 1973 0028 00       		.byte	0
 1974 0029 04       		.uleb128 0x4
 1975 002a 16       		.uleb128 0x16
 1976 002b 00       		.byte	0
 1977 002c 03       		.uleb128 0x3
 1978 002d 0E       		.uleb128 0xe
 1979 002e 3A       		.uleb128 0x3a
 1980 002f 0B       		.uleb128 0xb
 1981 0030 3B       		.uleb128 0x3b
 1982 0031 05       		.uleb128 0x5
 1983 0032 49       		.uleb128 0x49
 1984 0033 13       		.uleb128 0x13
 1985 0034 00       		.byte	0
 1986 0035 00       		.byte	0
 1987 0036 05       		.uleb128 0x5
 1988 0037 35       		.uleb128 0x35
 1989 0038 00       		.byte	0
 1990 0039 49       		.uleb128 0x49
 1991 003a 13       		.uleb128 0x13
 1992 003b 00       		.byte	0
 1993 003c 00       		.byte	0
 1994 003d 06       		.uleb128 0x6
 1995 003e 2E       		.uleb128 0x2e
 1996 003f 00       		.byte	0
 1997 0040 3F       		.uleb128 0x3f
 1998 0041 19       		.uleb128 0x19
 1999 0042 03       		.uleb128 0x3
 2000 0043 0E       		.uleb128 0xe
 2001 0044 3A       		.uleb128 0x3a
 2002 0045 0B       		.uleb128 0xb
 2003 0046 3B       		.uleb128 0x3b
 2004 0047 0B       		.uleb128 0xb
 2005 0048 27       		.uleb128 0x27
 2006 0049 19       		.uleb128 0x19
 2007 004a 11       		.uleb128 0x11
 2008 004b 01       		.uleb128 0x1
 2009 004c 12       		.uleb128 0x12
 2010 004d 06       		.uleb128 0x6
 2011 004e 40       		.uleb128 0x40
 2012 004f 18       		.uleb128 0x18
 2013 0050 9642     		.uleb128 0x2116
 2014 0052 19       		.uleb128 0x19
 2015 0053 00       		.byte	0
 2016 0054 00       		.byte	0
 2017 0055 07       		.uleb128 0x7
 2018 0056 2E       		.uleb128 0x2e
 2019 0057 01       		.byte	0x1
 2020 0058 3F       		.uleb128 0x3f
 2021 0059 19       		.uleb128 0x19
 2022 005a 03       		.uleb128 0x3
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 52


 2023 005b 0E       		.uleb128 0xe
 2024 005c 3A       		.uleb128 0x3a
 2025 005d 0B       		.uleb128 0xb
 2026 005e 3B       		.uleb128 0x3b
 2027 005f 0B       		.uleb128 0xb
 2028 0060 27       		.uleb128 0x27
 2029 0061 19       		.uleb128 0x19
 2030 0062 11       		.uleb128 0x11
 2031 0063 01       		.uleb128 0x1
 2032 0064 12       		.uleb128 0x12
 2033 0065 06       		.uleb128 0x6
 2034 0066 40       		.uleb128 0x40
 2035 0067 18       		.uleb128 0x18
 2036 0068 9642     		.uleb128 0x2116
 2037 006a 19       		.uleb128 0x19
 2038 006b 01       		.uleb128 0x1
 2039 006c 13       		.uleb128 0x13
 2040 006d 00       		.byte	0
 2041 006e 00       		.byte	0
 2042 006f 08       		.uleb128 0x8
 2043 0070 34       		.uleb128 0x34
 2044 0071 00       		.byte	0
 2045 0072 03       		.uleb128 0x3
 2046 0073 0E       		.uleb128 0xe
 2047 0074 3A       		.uleb128 0x3a
 2048 0075 0B       		.uleb128 0xb
 2049 0076 3B       		.uleb128 0x3b
 2050 0077 0B       		.uleb128 0xb
 2051 0078 49       		.uleb128 0x49
 2052 0079 13       		.uleb128 0x13
 2053 007a 02       		.uleb128 0x2
 2054 007b 18       		.uleb128 0x18
 2055 007c 00       		.byte	0
 2056 007d 00       		.byte	0
 2057 007e 09       		.uleb128 0x9
 2058 007f 01       		.uleb128 0x1
 2059 0080 01       		.byte	0x1
 2060 0081 49       		.uleb128 0x49
 2061 0082 13       		.uleb128 0x13
 2062 0083 01       		.uleb128 0x1
 2063 0084 13       		.uleb128 0x13
 2064 0085 00       		.byte	0
 2065 0086 00       		.byte	0
 2066 0087 0A       		.uleb128 0xa
 2067 0088 21       		.uleb128 0x21
 2068 0089 00       		.byte	0
 2069 008a 49       		.uleb128 0x49
 2070 008b 13       		.uleb128 0x13
 2071 008c 2F       		.uleb128 0x2f
 2072 008d 0B       		.uleb128 0xb
 2073 008e 00       		.byte	0
 2074 008f 00       		.byte	0
 2075 0090 0B       		.uleb128 0xb
 2076 0091 26       		.uleb128 0x26
 2077 0092 00       		.byte	0
 2078 0093 49       		.uleb128 0x49
 2079 0094 13       		.uleb128 0x13
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 53


 2080 0095 00       		.byte	0
 2081 0096 00       		.byte	0
 2082 0097 0C       		.uleb128 0xc
 2083 0098 2E       		.uleb128 0x2e
 2084 0099 00       		.byte	0
 2085 009a 3F       		.uleb128 0x3f
 2086 009b 19       		.uleb128 0x19
 2087 009c 03       		.uleb128 0x3
 2088 009d 0E       		.uleb128 0xe
 2089 009e 3A       		.uleb128 0x3a
 2090 009f 0B       		.uleb128 0xb
 2091 00a0 3B       		.uleb128 0x3b
 2092 00a1 05       		.uleb128 0x5
 2093 00a2 27       		.uleb128 0x27
 2094 00a3 19       		.uleb128 0x19
 2095 00a4 11       		.uleb128 0x11
 2096 00a5 01       		.uleb128 0x1
 2097 00a6 12       		.uleb128 0x12
 2098 00a7 06       		.uleb128 0x6
 2099 00a8 40       		.uleb128 0x40
 2100 00a9 18       		.uleb128 0x18
 2101 00aa 9642     		.uleb128 0x2116
 2102 00ac 19       		.uleb128 0x19
 2103 00ad 00       		.byte	0
 2104 00ae 00       		.byte	0
 2105 00af 0D       		.uleb128 0xd
 2106 00b0 2E       		.uleb128 0x2e
 2107 00b1 00       		.byte	0
 2108 00b2 3F       		.uleb128 0x3f
 2109 00b3 19       		.uleb128 0x19
 2110 00b4 03       		.uleb128 0x3
 2111 00b5 0E       		.uleb128 0xe
 2112 00b6 3A       		.uleb128 0x3a
 2113 00b7 0B       		.uleb128 0xb
 2114 00b8 3B       		.uleb128 0x3b
 2115 00b9 05       		.uleb128 0x5
 2116 00ba 27       		.uleb128 0x27
 2117 00bb 19       		.uleb128 0x19
 2118 00bc 11       		.uleb128 0x11
 2119 00bd 01       		.uleb128 0x1
 2120 00be 12       		.uleb128 0x12
 2121 00bf 06       		.uleb128 0x6
 2122 00c0 40       		.uleb128 0x40
 2123 00c1 18       		.uleb128 0x18
 2124 00c2 9742     		.uleb128 0x2117
 2125 00c4 19       		.uleb128 0x19
 2126 00c5 00       		.byte	0
 2127 00c6 00       		.byte	0
 2128 00c7 0E       		.uleb128 0xe
 2129 00c8 2E       		.uleb128 0x2e
 2130 00c9 01       		.byte	0x1
 2131 00ca 3F       		.uleb128 0x3f
 2132 00cb 19       		.uleb128 0x19
 2133 00cc 03       		.uleb128 0x3
 2134 00cd 0E       		.uleb128 0xe
 2135 00ce 3A       		.uleb128 0x3a
 2136 00cf 0B       		.uleb128 0xb
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 54


 2137 00d0 3B       		.uleb128 0x3b
 2138 00d1 05       		.uleb128 0x5
 2139 00d2 27       		.uleb128 0x27
 2140 00d3 19       		.uleb128 0x19
 2141 00d4 49       		.uleb128 0x49
 2142 00d5 13       		.uleb128 0x13
 2143 00d6 11       		.uleb128 0x11
 2144 00d7 01       		.uleb128 0x1
 2145 00d8 12       		.uleb128 0x12
 2146 00d9 06       		.uleb128 0x6
 2147 00da 40       		.uleb128 0x40
 2148 00db 18       		.uleb128 0x18
 2149 00dc 9742     		.uleb128 0x2117
 2150 00de 19       		.uleb128 0x19
 2151 00df 01       		.uleb128 0x1
 2152 00e0 13       		.uleb128 0x13
 2153 00e1 00       		.byte	0
 2154 00e2 00       		.byte	0
 2155 00e3 0F       		.uleb128 0xf
 2156 00e4 05       		.uleb128 0x5
 2157 00e5 00       		.byte	0
 2158 00e6 03       		.uleb128 0x3
 2159 00e7 0E       		.uleb128 0xe
 2160 00e8 3A       		.uleb128 0x3a
 2161 00e9 0B       		.uleb128 0xb
 2162 00ea 3B       		.uleb128 0x3b
 2163 00eb 05       		.uleb128 0x5
 2164 00ec 49       		.uleb128 0x49
 2165 00ed 13       		.uleb128 0x13
 2166 00ee 02       		.uleb128 0x2
 2167 00ef 18       		.uleb128 0x18
 2168 00f0 00       		.byte	0
 2169 00f1 00       		.byte	0
 2170 00f2 10       		.uleb128 0x10
 2171 00f3 34       		.uleb128 0x34
 2172 00f4 00       		.byte	0
 2173 00f5 03       		.uleb128 0x3
 2174 00f6 0E       		.uleb128 0xe
 2175 00f7 3A       		.uleb128 0x3a
 2176 00f8 0B       		.uleb128 0xb
 2177 00f9 3B       		.uleb128 0x3b
 2178 00fa 05       		.uleb128 0x5
 2179 00fb 49       		.uleb128 0x49
 2180 00fc 13       		.uleb128 0x13
 2181 00fd 02       		.uleb128 0x2
 2182 00fe 18       		.uleb128 0x18
 2183 00ff 00       		.byte	0
 2184 0100 00       		.byte	0
 2185 0101 11       		.uleb128 0x11
 2186 0102 2E       		.uleb128 0x2e
 2187 0103 01       		.byte	0x1
 2188 0104 3F       		.uleb128 0x3f
 2189 0105 19       		.uleb128 0x19
 2190 0106 03       		.uleb128 0x3
 2191 0107 0E       		.uleb128 0xe
 2192 0108 3A       		.uleb128 0x3a
 2193 0109 0B       		.uleb128 0xb
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 55


 2194 010a 3B       		.uleb128 0x3b
 2195 010b 05       		.uleb128 0x5
 2196 010c 27       		.uleb128 0x27
 2197 010d 19       		.uleb128 0x19
 2198 010e 49       		.uleb128 0x49
 2199 010f 13       		.uleb128 0x13
 2200 0110 11       		.uleb128 0x11
 2201 0111 01       		.uleb128 0x1
 2202 0112 12       		.uleb128 0x12
 2203 0113 06       		.uleb128 0x6
 2204 0114 40       		.uleb128 0x40
 2205 0115 18       		.uleb128 0x18
 2206 0116 9642     		.uleb128 0x2116
 2207 0118 19       		.uleb128 0x19
 2208 0119 01       		.uleb128 0x1
 2209 011a 13       		.uleb128 0x13
 2210 011b 00       		.byte	0
 2211 011c 00       		.byte	0
 2212 011d 12       		.uleb128 0x12
 2213 011e 2E       		.uleb128 0x2e
 2214 011f 01       		.byte	0x1
 2215 0120 3F       		.uleb128 0x3f
 2216 0121 19       		.uleb128 0x19
 2217 0122 03       		.uleb128 0x3
 2218 0123 0E       		.uleb128 0xe
 2219 0124 3A       		.uleb128 0x3a
 2220 0125 0B       		.uleb128 0xb
 2221 0126 3B       		.uleb128 0x3b
 2222 0127 05       		.uleb128 0x5
 2223 0128 27       		.uleb128 0x27
 2224 0129 19       		.uleb128 0x19
 2225 012a 11       		.uleb128 0x11
 2226 012b 01       		.uleb128 0x1
 2227 012c 12       		.uleb128 0x12
 2228 012d 06       		.uleb128 0x6
 2229 012e 40       		.uleb128 0x40
 2230 012f 18       		.uleb128 0x18
 2231 0130 9742     		.uleb128 0x2117
 2232 0132 19       		.uleb128 0x19
 2233 0133 01       		.uleb128 0x1
 2234 0134 13       		.uleb128 0x13
 2235 0135 00       		.byte	0
 2236 0136 00       		.byte	0
 2237 0137 13       		.uleb128 0x13
 2238 0138 2E       		.uleb128 0x2e
 2239 0139 01       		.byte	0x1
 2240 013a 3F       		.uleb128 0x3f
 2241 013b 19       		.uleb128 0x19
 2242 013c 03       		.uleb128 0x3
 2243 013d 0E       		.uleb128 0xe
 2244 013e 3A       		.uleb128 0x3a
 2245 013f 0B       		.uleb128 0xb
 2246 0140 3B       		.uleb128 0x3b
 2247 0141 05       		.uleb128 0x5
 2248 0142 27       		.uleb128 0x27
 2249 0143 19       		.uleb128 0x19
 2250 0144 11       		.uleb128 0x11
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 56


 2251 0145 01       		.uleb128 0x1
 2252 0146 12       		.uleb128 0x12
 2253 0147 06       		.uleb128 0x6
 2254 0148 40       		.uleb128 0x40
 2255 0149 18       		.uleb128 0x18
 2256 014a 9642     		.uleb128 0x2116
 2257 014c 19       		.uleb128 0x19
 2258 014d 01       		.uleb128 0x1
 2259 014e 13       		.uleb128 0x13
 2260 014f 00       		.byte	0
 2261 0150 00       		.byte	0
 2262 0151 14       		.uleb128 0x14
 2263 0152 34       		.uleb128 0x34
 2264 0153 00       		.byte	0
 2265 0154 03       		.uleb128 0x3
 2266 0155 0E       		.uleb128 0xe
 2267 0156 3A       		.uleb128 0x3a
 2268 0157 0B       		.uleb128 0xb
 2269 0158 3B       		.uleb128 0x3b
 2270 0159 0B       		.uleb128 0xb
 2271 015a 49       		.uleb128 0x49
 2272 015b 13       		.uleb128 0x13
 2273 015c 3F       		.uleb128 0x3f
 2274 015d 19       		.uleb128 0x19
 2275 015e 02       		.uleb128 0x2
 2276 015f 18       		.uleb128 0x18
 2277 0160 00       		.byte	0
 2278 0161 00       		.byte	0
 2279 0162 00       		.byte	0
 2280              		.section	.debug_aranges,"",%progbits
 2281 0000 A4000000 		.4byte	0xa4
 2282 0004 0200     		.2byte	0x2
 2283 0006 00000000 		.4byte	.Ldebug_info0
 2284 000a 04       		.byte	0x4
 2285 000b 00       		.byte	0
 2286 000c 0000     		.2byte	0
 2287 000e 0000     		.2byte	0
 2288 0010 00000000 		.4byte	.LFB0
 2289 0014 24000000 		.4byte	.LFE0-.LFB0
 2290 0018 00000000 		.4byte	.LFB1
 2291 001c F0010000 		.4byte	.LFE1-.LFB1
 2292 0020 00000000 		.4byte	.LFB2
 2293 0024 2C000000 		.4byte	.LFE2-.LFB2
 2294 0028 00000000 		.4byte	.LFB3
 2295 002c 1C000000 		.4byte	.LFE3-.LFB3
 2296 0030 00000000 		.4byte	.LFB4
 2297 0034 14000000 		.4byte	.LFE4-.LFB4
 2298 0038 00000000 		.4byte	.LFB5
 2299 003c 0A000000 		.4byte	.LFE5-.LFB5
 2300 0040 00000000 		.4byte	.LFB6
 2301 0044 48000000 		.4byte	.LFE6-.LFB6
 2302 0048 00000000 		.4byte	.LFB7
 2303 004c 44000000 		.4byte	.LFE7-.LFB7
 2304 0050 00000000 		.4byte	.LFB8
 2305 0054 20000000 		.4byte	.LFE8-.LFB8
 2306 0058 00000000 		.4byte	.LFB9
 2307 005c 30000000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 57


 2308 0060 00000000 		.4byte	.LFB10
 2309 0064 30000000 		.4byte	.LFE10-.LFB10
 2310 0068 00000000 		.4byte	.LFB11
 2311 006c 20000000 		.4byte	.LFE11-.LFB11
 2312 0070 00000000 		.4byte	.LFB12
 2313 0074 20000000 		.4byte	.LFE12-.LFB12
 2314 0078 00000000 		.4byte	.LFB13
 2315 007c 34000000 		.4byte	.LFE13-.LFB13
 2316 0080 00000000 		.4byte	.LFB14
 2317 0084 2C000000 		.4byte	.LFE14-.LFB14
 2318 0088 00000000 		.4byte	.LFB15
 2319 008c C8000000 		.4byte	.LFE15-.LFB15
 2320 0090 00000000 		.4byte	.LFB16
 2321 0094 B8000000 		.4byte	.LFE16-.LFB16
 2322 0098 00000000 		.4byte	.LFB17
 2323 009c A4000000 		.4byte	.LFE17-.LFB17
 2324 00a0 00000000 		.4byte	0
 2325 00a4 00000000 		.4byte	0
 2326              		.section	.debug_ranges,"",%progbits
 2327              	.Ldebug_ranges0:
 2328 0000 00000000 		.4byte	.LFB0
 2329 0004 24000000 		.4byte	.LFE0
 2330 0008 00000000 		.4byte	.LFB1
 2331 000c F0010000 		.4byte	.LFE1
 2332 0010 00000000 		.4byte	.LFB2
 2333 0014 2C000000 		.4byte	.LFE2
 2334 0018 00000000 		.4byte	.LFB3
 2335 001c 1C000000 		.4byte	.LFE3
 2336 0020 00000000 		.4byte	.LFB4
 2337 0024 14000000 		.4byte	.LFE4
 2338 0028 00000000 		.4byte	.LFB5
 2339 002c 0A000000 		.4byte	.LFE5
 2340 0030 00000000 		.4byte	.LFB6
 2341 0034 48000000 		.4byte	.LFE6
 2342 0038 00000000 		.4byte	.LFB7
 2343 003c 44000000 		.4byte	.LFE7
 2344 0040 00000000 		.4byte	.LFB8
 2345 0044 20000000 		.4byte	.LFE8
 2346 0048 00000000 		.4byte	.LFB9
 2347 004c 30000000 		.4byte	.LFE9
 2348 0050 00000000 		.4byte	.LFB10
 2349 0054 30000000 		.4byte	.LFE10
 2350 0058 00000000 		.4byte	.LFB11
 2351 005c 20000000 		.4byte	.LFE11
 2352 0060 00000000 		.4byte	.LFB12
 2353 0064 20000000 		.4byte	.LFE12
 2354 0068 00000000 		.4byte	.LFB13
 2355 006c 34000000 		.4byte	.LFE13
 2356 0070 00000000 		.4byte	.LFB14
 2357 0074 2C000000 		.4byte	.LFE14
 2358 0078 00000000 		.4byte	.LFB15
 2359 007c C8000000 		.4byte	.LFE15
 2360 0080 00000000 		.4byte	.LFB16
 2361 0084 B8000000 		.4byte	.LFE16
 2362 0088 00000000 		.4byte	.LFB17
 2363 008c A4000000 		.4byte	.LFE17
 2364 0090 00000000 		.4byte	0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 58


 2365 0094 00000000 		.4byte	0
 2366              		.section	.debug_line,"",%progbits
 2367              	.Ldebug_line0:
 2368 0000 99020000 		.section	.debug_str,"MS",%progbits,1
 2368      02004A00 
 2368      00000201 
 2368      FB0E0D00 
 2368      01010101 
 2369              	.LASF59:
 2370 0000 4144435F 		.ascii	"ADC_SAR_Seq_1_offset\000"
 2370      5341525F 
 2370      5365715F 
 2370      315F6F66 
 2370      66736574 
 2371              	.LASF10:
 2372 0015 75696E74 		.ascii	"uint16\000"
 2372      313600
 2373              	.LASF37:
 2374 001c 4144435F 		.ascii	"ADC_SAR_Seq_1_Init\000"
 2374      5341525F 
 2374      5365715F 
 2374      315F496E 
 2374      697400
 2375              	.LASF49:
 2376 002f 61646347 		.ascii	"adcGain\000"
 2376      61696E00 
 2377              	.LASF24:
 2378 0037 636F756E 		.ascii	"counts\000"
 2378      747300
 2379              	.LASF29:
 2380 003e 4144435F 		.ascii	"ADC_SAR_Seq_1_StartConvert\000"
 2380      5341525F 
 2380      5365715F 
 2380      315F5374 
 2380      61727443 
 2381              	.LASF45:
 2382 0059 4144435F 		.ascii	"ADC_SAR_Seq_1_SetSatMask\000"
 2382      5341525F 
 2382      5365715F 
 2382      315F5365 
 2382      74536174 
 2383              	.LASF26:
 2384 0072 4144435F 		.ascii	"ADC_SAR_Seq_1_Start\000"
 2384      5341525F 
 2384      5365715F 
 2384      315F5374 
 2384      61727400 
 2385              	.LASF7:
 2386 0086 6C6F6E67 		.ascii	"long long unsigned int\000"
 2386      206C6F6E 
 2386      6720756E 
 2386      7369676E 
 2386      65642069 
 2387              	.LASF27:
 2388 009d 4144435F 		.ascii	"ADC_SAR_Seq_1_Enable\000"
 2388      5341525F 
 2388      5365715F 
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 59


 2388      315F456E 
 2388      61626C65 
 2389              	.LASF25:
 2390 00b2 4144435F 		.ascii	"ADC_SAR_Seq_1_InputsPlacement\000"
 2390      5341525F 
 2390      5365715F 
 2390      315F496E 
 2390      70757473 
 2391              	.LASF33:
 2392 00d0 4144435F 		.ascii	"ADC_SAR_Seq_1_GetResult16\000"
 2392      5341525F 
 2392      5365715F 
 2392      315F4765 
 2392      74526573 
 2393              	.LASF6:
 2394 00ea 6C6F6E67 		.ascii	"long long int\000"
 2394      206C6F6E 
 2394      6720696E 
 2394      7400
 2395              	.LASF0:
 2396 00f8 7369676E 		.ascii	"signed char\000"
 2396      65642063 
 2396      68617200 
 2397              	.LASF42:
 2398 0104 4144435F 		.ascii	"ADC_SAR_Seq_1_SetHighLimit\000"
 2398      5341525F 
 2398      5365715F 
 2398      315F5365 
 2398      74486967 
 2399              	.LASF13:
 2400 011f 696E7433 		.ascii	"int32\000"
 2400      3200
 2401              	.LASF53:
 2402 0125 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_uVolts\000"
 2402      5341525F 
 2402      5365715F 
 2402      315F436F 
 2402      756E7473 
 2403              	.LASF4:
 2404 0143 6C6F6E67 		.ascii	"long int\000"
 2404      20696E74 
 2404      00
 2405              	.LASF9:
 2406 014c 75696E74 		.ascii	"uint8\000"
 2406      3800
 2407              	.LASF16:
 2408 0152 646F7562 		.ascii	"double\000"
 2408      6C6500
 2409              	.LASF11:
 2410 0159 75696E74 		.ascii	"uint32\000"
 2410      333200
 2411              	.LASF39:
 2412 0160 6D61736B 		.ascii	"mask\000"
 2412      00
 2413              	.LASF50:
 2414 0165 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_mVolts\000"
 2414      5341525F 
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 60


 2414      5365715F 
 2414      315F436F 
 2414      756E7473 
 2415              	.LASF34:
 2416 0183 7265744D 		.ascii	"retMode\000"
 2416      6F646500 
 2417              	.LASF58:
 2418 018b 4144435F 		.ascii	"ADC_SAR_Seq_1_initVar\000"
 2418      5341525F 
 2418      5365715F 
 2418      315F696E 
 2418      69745661 
 2419              	.LASF8:
 2420 01a1 756E7369 		.ascii	"unsigned int\000"
 2420      676E6564 
 2420      20696E74 
 2420      00
 2421              	.LASF54:
 2422 01ae 75566F6C 		.ascii	"uVolts\000"
 2422      747300
 2423              	.LASF5:
 2424 01b5 6C6F6E67 		.ascii	"long unsigned int\000"
 2424      20756E73 
 2424      69676E65 
 2424      6420696E 
 2424      7400
 2425              	.LASF56:
 2426 01c7 766F6C74 		.ascii	"volts\000"
 2426      7300
 2427              	.LASF23:
 2428 01cd 746D7052 		.ascii	"tmpRegVal\000"
 2428      65675661 
 2428      6C00
 2429              	.LASF3:
 2430 01d7 73686F72 		.ascii	"short unsigned int\000"
 2430      7420756E 
 2430      7369676E 
 2430      65642069 
 2430      6E7400
 2431              	.LASF57:
 2432 01ea 4144435F 		.ascii	"ADC_SAR_Seq_1_channelsConfig\000"
 2432      5341525F 
 2432      5365715F 
 2432      315F6368 
 2432      616E6E65 
 2433              	.LASF61:
 2434 0207 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2434      43313120 
 2434      352E342E 
 2434      31203230 
 2434      31363036 
 2435 023a 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2435      20726576 
 2435      6973696F 
 2435      6E203233 
 2435      37373135 
 2436 026d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 61


 2436      66756E63 
 2436      74696F6E 
 2436      2D736563 
 2436      74696F6E 
 2437              	.LASF52:
 2438 0295 6D566F6C 		.ascii	"mVolts\000"
 2438      747300
 2439              	.LASF19:
 2440 029c 72656733 		.ascii	"reg32\000"
 2440      3200
 2441              	.LASF14:
 2442 02a2 666C6F61 		.ascii	"float32\000"
 2442      74333200 
 2443              	.LASF21:
 2444 02aa 73697A65 		.ascii	"sizetype\000"
 2444      74797065 
 2444      00
 2445              	.LASF41:
 2446 02b3 6C6F774C 		.ascii	"lowLimit\000"
 2446      696D6974 
 2446      00
 2447              	.LASF20:
 2448 02bc 6C6F6E67 		.ascii	"long double\000"
 2448      20646F75 
 2448      626C6500 
 2449              	.LASF32:
 2450 02c8 4144435F 		.ascii	"ADC_SAR_Seq_1_IsEndConversion\000"
 2450      5341525F 
 2450      5365715F 
 2450      315F4973 
 2450      456E6443 
 2451              	.LASF30:
 2452 02e6 4144435F 		.ascii	"ADC_SAR_Seq_1_StopConvert\000"
 2452      5341525F 
 2452      5365715F 
 2452      315F5374 
 2452      6F70436F 
 2453              	.LASF17:
 2454 0300 696E7436 		.ascii	"int64\000"
 2454      3400
 2455              	.LASF62:
 2456 0306 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC_SAR_Seq_1.c\000"
 2456      72617465 
 2456      645F536F 
 2456      75726365 
 2456      5C50536F 
 2457              	.LASF15:
 2458 032d 666C6F61 		.ascii	"float\000"
 2458      7400
 2459              	.LASF48:
 2460 0333 4144435F 		.ascii	"ADC_SAR_Seq_1_SetGain\000"
 2460      5341525F 
 2460      5365715F 
 2460      315F5365 
 2460      74476169 
 2461              	.LASF28:
 2462 0349 4144435F 		.ascii	"ADC_SAR_Seq_1_Stop\000"
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 62


 2462      5341525F 
 2462      5365715F 
 2462      315F5374 
 2462      6F7000
 2463              	.LASF43:
 2464 035c 68696768 		.ascii	"highLimit\000"
 2464      4C696D69 
 2464      7400
 2465              	.LASF1:
 2466 0366 756E7369 		.ascii	"unsigned char\000"
 2466      676E6564 
 2466      20636861 
 2466      7200
 2467              	.LASF63:
 2468 0374 443A5C53 		.ascii	"D:\\Sensored BLDC Motor Control\\control_v3.cydsn\000"
 2468      656E736F 
 2468      72656420 
 2468      424C4443 
 2468      204D6F74 
 2469              	.LASF2:
 2470 03a4 73686F72 		.ascii	"short int\000"
 2470      7420696E 
 2470      7400
 2471              	.LASF55:
 2472 03ae 4144435F 		.ascii	"ADC_SAR_Seq_1_CountsTo_Volts\000"
 2472      5341525F 
 2472      5365715F 
 2472      315F436F 
 2472      756E7473 
 2473              	.LASF38:
 2474 03cb 4144435F 		.ascii	"ADC_SAR_Seq_1_SetChanMask\000"
 2474      5341525F 
 2474      5365715F 
 2474      315F5365 
 2474      74436861 
 2475              	.LASF22:
 2476 03e5 63684E75 		.ascii	"chNum\000"
 2476      6D00
 2477              	.LASF35:
 2478 03eb 6368616E 		.ascii	"chan\000"
 2478      00
 2479              	.LASF18:
 2480 03f0 63686172 		.ascii	"char\000"
 2480      00
 2481              	.LASF40:
 2482 03f5 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLowLimit\000"
 2482      5341525F 
 2482      5365715F 
 2482      315F5365 
 2482      744C6F77 
 2483              	.LASF47:
 2484 040f 6F666673 		.ascii	"offset\000"
 2484      657400
 2485              	.LASF51:
 2486 0416 61646343 		.ascii	"adcCounts\000"
 2486      6F756E74 
 2486      7300
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccjaVt2P.s 			page 63


 2487              	.LASF60:
 2488 0420 4144435F 		.ascii	"ADC_SAR_Seq_1_countsPer10Volt\000"
 2488      5341525F 
 2488      5365715F 
 2488      315F636F 
 2488      756E7473 
 2489              	.LASF31:
 2490 043e 73746174 		.ascii	"status\000"
 2490      757300
 2491              	.LASF46:
 2492 0445 4144435F 		.ascii	"ADC_SAR_Seq_1_SetOffset\000"
 2492      5341525F 
 2492      5365715F 
 2492      315F5365 
 2492      744F6666 
 2493              	.LASF12:
 2494 045d 696E7431 		.ascii	"int16\000"
 2494      3600
 2495              	.LASF44:
 2496 0463 4144435F 		.ascii	"ADC_SAR_Seq_1_SetLimitMask\000"
 2496      5341525F 
 2496      5365715F 
 2496      315F5365 
 2496      744C696D 
 2497              	.LASF36:
 2498 047e 72657375 		.ascii	"result\000"
 2498      6C7400
 2499              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
