ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"ADC_SAR_Seq_1_intClock.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_SAR_Seq_1_intClock_Start,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_SAR_Seq_1_intClock_Start
  22              		.code	16
  23              		.thumb_func
  24              		.type	ADC_SAR_Seq_1_intClock_Start, %function
  25              	ADC_SAR_Seq_1_intClock_Start:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC4\\ADC_SAR_Seq_1_intClock.c"
   1:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * File Name: ADC_SAR_Seq_1_intClock.c
   3:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Version 2.20
   4:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
   5:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Description:
   6:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *   Provides system API for the clocking, interrupts and watchdog timer.
   7:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
   8:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Note:
   9:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *   Documentation of the API's in this file is located in the
  10:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *   System Reference Guide provided with PSoC Creator.
  11:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  12:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
  13:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  19:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #include <cydevice_trm.h>
  20:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #include "ADC_SAR_Seq_1_intClock.h"
  21:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  22:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #if defined CYREG_PERI_DIV_CMD
  23:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  24:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
  25:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Function Name: ADC_SAR_Seq_1_intClock_StartEx
  26:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
  27:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  28:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Summary:
  29:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Starts the clock, aligned to the specified running clock.
  30:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 2


  31:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Parameters:
  32:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  alignClkDiv:  The divider to which phase alignment is performed when the
  33:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *    clock is started.
  34:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  35:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Returns:
  36:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
  37:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  38:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
  39:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** void ADC_SAR_Seq_1_intClock_StartEx(uint32 alignClkDiv)
  40:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** {
  41:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* Make sure any previous start command has finished. */
  42:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     while((ADC_SAR_Seq_1_intClock_CMD_REG & ADC_SAR_Seq_1_intClock_CMD_ENABLE_MASK) != 0u)
  43:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     {
  44:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     }
  45:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
  46:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* Specify the target divider and it's alignment divider, and enable. */
  47:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     ADC_SAR_Seq_1_intClock_CMD_REG =
  48:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         ((uint32)ADC_SAR_Seq_1_intClock__DIV_ID << ADC_SAR_Seq_1_intClock_CMD_DIV_SHIFT)|
  49:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         (alignClkDiv << ADC_SAR_Seq_1_intClock_CMD_PA_DIV_SHIFT) |
  50:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         (uint32)ADC_SAR_Seq_1_intClock_CMD_ENABLE_MASK;
  51:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** }
  52:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  53:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #else
  54:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  55:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
  56:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Function Name: ADC_SAR_Seq_1_intClock_Start
  57:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
  58:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  59:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Summary:
  60:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Starts the clock.
  61:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  62:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Parameters:
  63:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
  64:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  65:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Returns:
  66:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
  67:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  68:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
  69:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  70:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** void ADC_SAR_Seq_1_intClock_Start(void)
  71:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** {
  28              		.loc 1 71 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
  72:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* Set the bit to enable the clock. */
  73:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     ADC_SAR_Seq_1_intClock_ENABLE_REG |= ADC_SAR_Seq_1_intClock__ENABLE_MASK;
  38              		.loc 1 73 0
  39 0004 044B     		ldr	r3, .L2
  40 0006 044A     		ldr	r2, .L2
  41 0008 1268     		ldr	r2, [r2]
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 3


  42 000a 8021     		movs	r1, #128
  43 000c 0906     		lsls	r1, r1, #24
  44 000e 0A43     		orrs	r2, r1
  45 0010 1A60     		str	r2, [r3]
  74:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** }
  46              		.loc 1 74 0
  47 0012 C046     		nop
  48 0014 BD46     		mov	sp, r7
  49              		@ sp needed
  50 0016 80BD     		pop	{r7, pc}
  51              	.L3:
  52              		.align	2
  53              	.L2:
  54 0018 00000240 		.word	1073872896
  55              		.cfi_endproc
  56              	.LFE0:
  57              		.size	ADC_SAR_Seq_1_intClock_Start, .-ADC_SAR_Seq_1_intClock_Start
  58              		.section	.text.ADC_SAR_Seq_1_intClock_Stop,"ax",%progbits
  59              		.align	2
  60              		.global	ADC_SAR_Seq_1_intClock_Stop
  61              		.code	16
  62              		.thumb_func
  63              		.type	ADC_SAR_Seq_1_intClock_Stop, %function
  64              	ADC_SAR_Seq_1_intClock_Stop:
  65              	.LFB1:
  75:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  76:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #endif /* CYREG_PERI_DIV_CMD */
  77:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  78:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  79:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
  80:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Function Name: ADC_SAR_Seq_1_intClock_Stop
  81:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
  82:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  83:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Summary:
  84:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Stops the clock and returns immediately. This API does not require the
  85:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  source clock to be running but may return before the hardware is actually
  86:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  disabled.
  87:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  88:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Parameters:
  89:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
  90:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  91:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Returns:
  92:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
  93:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
  94:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
  95:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** void ADC_SAR_Seq_1_intClock_Stop(void)
  96:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** {
  66              		.loc 1 96 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 1, uses_anonymous_args = 0
  70 0000 80B5     		push	{r7, lr}
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 7, -8
  73              		.cfi_offset 14, -4
  74 0002 00AF     		add	r7, sp, #0
  75              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 4


  97:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #if defined CYREG_PERI_DIV_CMD
  98:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
  99:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* Make sure any previous start command has finished. */
 100:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     while((ADC_SAR_Seq_1_intClock_CMD_REG & ADC_SAR_Seq_1_intClock_CMD_ENABLE_MASK) != 0u)
 101:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     {
 102:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     }
 103:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
 104:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* Specify the target divider and it's alignment divider, and disable. */
 105:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     ADC_SAR_Seq_1_intClock_CMD_REG =
 106:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         ((uint32)ADC_SAR_Seq_1_intClock__DIV_ID << ADC_SAR_Seq_1_intClock_CMD_DIV_SHIFT)|
 107:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         ((uint32)ADC_SAR_Seq_1_intClock_CMD_DISABLE_MASK);
 108:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 109:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #else
 110:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 111:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* Clear the bit to disable the clock. */
 112:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     ADC_SAR_Seq_1_intClock_ENABLE_REG &= (uint32)(~ADC_SAR_Seq_1_intClock__ENABLE_MASK);
  76              		.loc 1 112 0
  77 0004 044B     		ldr	r3, .L5
  78 0006 044A     		ldr	r2, .L5
  79 0008 1268     		ldr	r2, [r2]
  80 000a 5200     		lsls	r2, r2, #1
  81 000c 5208     		lsrs	r2, r2, #1
  82 000e 1A60     		str	r2, [r3]
 113:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
 114:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #endif /* CYREG_PERI_DIV_CMD */
 115:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** }
  83              		.loc 1 115 0
  84 0010 C046     		nop
  85 0012 BD46     		mov	sp, r7
  86              		@ sp needed
  87 0014 80BD     		pop	{r7, pc}
  88              	.L6:
  89 0016 C046     		.align	2
  90              	.L5:
  91 0018 00000240 		.word	1073872896
  92              		.cfi_endproc
  93              	.LFE1:
  94              		.size	ADC_SAR_Seq_1_intClock_Stop, .-ADC_SAR_Seq_1_intClock_Stop
  95              		.section	.text.ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister,"ax",%progbits
  96              		.align	2
  97              		.global	ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister
  98              		.code	16
  99              		.thumb_func
 100              		.type	ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister, %function
 101              	ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister:
 102              	.LFB2:
 116:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 117:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 118:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
 119:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Function Name: ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister
 120:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
 121:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 122:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Summary:
 123:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Modifies the clock divider and the fractional divider.
 124:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 125:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Parameters:
 126:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  clkDivider:  Divider register value (0-65535). This value is NOT the
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 5


 127:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 128:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 129:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  fracDivider:  Fractional Divider register value (0-31).
 130:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Returns:
 131:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
 132:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 133:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
 134:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** void ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister(uint16 clkDivider, uint8 clkFractional)
 135:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** {
 103              		.loc 1 135 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 16
 106              		@ frame_needed = 1, uses_anonymous_args = 0
 107 0000 80B5     		push	{r7, lr}
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 7, -8
 110              		.cfi_offset 14, -4
 111 0002 84B0     		sub	sp, sp, #16
 112              		.cfi_def_cfa_offset 24
 113 0004 00AF     		add	r7, sp, #0
 114              		.cfi_def_cfa_register 7
 115 0006 0200     		movs	r2, r0
 116 0008 BB1D     		adds	r3, r7, #6
 117 000a 1A80     		strh	r2, [r3]
 118 000c 7B1D     		adds	r3, r7, #5
 119 000e 0A1C     		adds	r2, r1, #0
 120 0010 1A70     		strb	r2, [r3]
 136:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     uint32 maskVal;
 137:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     uint32 regVal;
 138:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
 139:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #if defined (ADC_SAR_Seq_1_intClock__FRAC_MASK) || defined (CYREG_PERI_DIV_CMD)
 140:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
 141:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 	/* get all but divider bits */
 142:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     maskVal = ADC_SAR_Seq_1_intClock_DIV_REG & 
 143:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****                     (uint32)(~(uint32)(ADC_SAR_Seq_1_intClock_DIV_INT_MASK | ADC_SAR_Seq_1_intClock
 144:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 	/* combine mask and new divider vals into 32-bit value */
 145:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     regVal = maskVal |
 146:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         ((uint32)((uint32)clkDivider <<  ADC_SAR_Seq_1_intClock_DIV_INT_SHIFT) & ADC_SAR_Seq_1_intC
 147:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         ((uint32)((uint32)clkFractional << ADC_SAR_Seq_1_intClock_DIV_FRAC_SHIFT) & ADC_SAR_Seq_1_i
 148:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
 149:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #else
 150:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* get all but integer divider bits */
 151:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     maskVal = ADC_SAR_Seq_1_intClock_DIV_REG & (uint32)(~(uint32)ADC_SAR_Seq_1_intClock__DIVIDER_MA
 121              		.loc 1 151 0
 122 0012 084B     		ldr	r3, .L8
 123 0014 1B68     		ldr	r3, [r3]
 124 0016 1B0C     		lsrs	r3, r3, #16
 125 0018 1B04     		lsls	r3, r3, #16
 126 001a FB60     		str	r3, [r7, #12]
 152:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* combine mask and new divider val into 32-bit value */
 153:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     regVal = clkDivider | maskVal;
 127              		.loc 1 153 0
 128 001c BB1D     		adds	r3, r7, #6
 129 001e 1A88     		ldrh	r2, [r3]
 130 0020 FB68     		ldr	r3, [r7, #12]
 131 0022 1343     		orrs	r3, r2
 132 0024 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 6


 154:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     
 155:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #endif /* ADC_SAR_Seq_1_intClock__FRAC_MASK || CYREG_PERI_DIV_CMD */
 156:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 157:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     ADC_SAR_Seq_1_intClock_DIV_REG = regVal;
 133              		.loc 1 157 0
 134 0026 034B     		ldr	r3, .L8
 135 0028 BA68     		ldr	r2, [r7, #8]
 136 002a 1A60     		str	r2, [r3]
 158:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** }
 137              		.loc 1 158 0
 138 002c C046     		nop
 139 002e BD46     		mov	sp, r7
 140 0030 04B0     		add	sp, sp, #16
 141              		@ sp needed
 142 0032 80BD     		pop	{r7, pc}
 143              	.L9:
 144              		.align	2
 145              	.L8:
 146 0034 00000240 		.word	1073872896
 147              		.cfi_endproc
 148              	.LFE2:
 149              		.size	ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister, .-ADC_SAR_Seq_1_intClock_SetFractionalD
 150              		.section	.text.ADC_SAR_Seq_1_intClock_GetDividerRegister,"ax",%progbits
 151              		.align	2
 152              		.global	ADC_SAR_Seq_1_intClock_GetDividerRegister
 153              		.code	16
 154              		.thumb_func
 155              		.type	ADC_SAR_Seq_1_intClock_GetDividerRegister, %function
 156              	ADC_SAR_Seq_1_intClock_GetDividerRegister:
 157              	.LFB3:
 159:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 160:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 161:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
 162:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Function Name: ADC_SAR_Seq_1_intClock_GetDividerRegister
 163:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
 164:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 165:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Summary:
 166:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Gets the clock divider register value.
 167:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 168:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Parameters:
 169:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
 170:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 171:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Returns:
 172:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 173:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  divide by 2, the return value will be 1.
 174:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 175:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
 176:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** uint16 ADC_SAR_Seq_1_intClock_GetDividerRegister(void)
 177:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** {
 158              		.loc 1 177 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 7


 166 0002 00AF     		add	r7, sp, #0
 167              		.cfi_def_cfa_register 7
 178:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     return (uint16)((ADC_SAR_Seq_1_intClock_DIV_REG & ADC_SAR_Seq_1_intClock_DIV_INT_MASK)
 168              		.loc 1 178 0
 169 0004 024B     		ldr	r3, .L12
 170 0006 1B68     		ldr	r3, [r3]
 171 0008 9BB2     		uxth	r3, r3
 179:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         >> ADC_SAR_Seq_1_intClock_DIV_INT_SHIFT);
 180:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** }
 172              		.loc 1 180 0
 173 000a 1800     		movs	r0, r3
 174 000c BD46     		mov	sp, r7
 175              		@ sp needed
 176 000e 80BD     		pop	{r7, pc}
 177              	.L13:
 178              		.align	2
 179              	.L12:
 180 0010 00000240 		.word	1073872896
 181              		.cfi_endproc
 182              	.LFE3:
 183              		.size	ADC_SAR_Seq_1_intClock_GetDividerRegister, .-ADC_SAR_Seq_1_intClock_GetDividerRegister
 184              		.section	.text.ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister,"ax",%progbits
 185              		.align	2
 186              		.global	ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister
 187              		.code	16
 188              		.thumb_func
 189              		.type	ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister, %function
 190              	ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister:
 191              	.LFB4:
 181:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 182:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** 
 183:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** /*******************************************************************************
 184:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Function Name: ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister
 185:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** ********************************************************************************
 186:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 187:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Summary:
 188:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Gets the clock fractional divider register value.
 189:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 190:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Parameters:
 191:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  None
 192:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 193:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** * Returns:
 194:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  Fractional Divide value of the clock
 195:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *  0 if the fractional divider is not in use.
 196:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *
 197:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** *******************************************************************************/
 198:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** uint8 ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister(void)
 199:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** {
 192              		.loc 1 199 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196 0000 80B5     		push	{r7, lr}
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 7, -8
 199              		.cfi_offset 14, -4
 200 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 8


 201              		.cfi_def_cfa_register 7
 200:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #if defined (ADC_SAR_Seq_1_intClock__FRAC_MASK)
 201:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     /* return fractional divider bits */
 202:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     return (uint8)((ADC_SAR_Seq_1_intClock_DIV_REG & ADC_SAR_Seq_1_intClock_DIV_FRAC_MASK)
 203:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****         >> ADC_SAR_Seq_1_intClock_DIV_FRAC_SHIFT);
 204:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #else
 205:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c ****     return 0u;
 202              		.loc 1 205 0
 203 0004 0023     		movs	r3, #0
 206:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** #endif /* ADC_SAR_Seq_1_intClock__FRAC_MASK */
 207:Generated_Source\PSoC4/ADC_SAR_Seq_1_intClock.c **** }
 204              		.loc 1 207 0
 205 0006 1800     		movs	r0, r3
 206 0008 BD46     		mov	sp, r7
 207              		@ sp needed
 208 000a 80BD     		pop	{r7, pc}
 209              		.cfi_endproc
 210              	.LFE4:
 211              		.size	ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister, .-ADC_SAR_Seq_1_intClock_GetFractionalD
 212              		.text
 213              	.Letext0:
 214              		.file 2 "Generated_Source\\PSoC4/cytypes.h"
 215              		.section	.debug_info,"",%progbits
 216              	.Ldebug_info0:
 217 0000 4C010000 		.4byte	0x14c
 218 0004 0400     		.2byte	0x4
 219 0006 00000000 		.4byte	.Ldebug_abbrev0
 220 000a 04       		.byte	0x4
 221 000b 01       		.uleb128 0x1
 222 000c FF000000 		.4byte	.LASF24
 223 0010 0C       		.byte	0xc
 224 0011 50000000 		.4byte	.LASF25
 225 0015 E6010000 		.4byte	.LASF26
 226 0019 00000000 		.4byte	.Ldebug_ranges0+0
 227 001d 00000000 		.4byte	0
 228 0021 00000000 		.4byte	.Ldebug_line0
 229 0025 02       		.uleb128 0x2
 230 0026 01       		.byte	0x1
 231 0027 06       		.byte	0x6
 232 0028 BF020000 		.4byte	.LASF0
 233 002c 02       		.uleb128 0x2
 234 002d 01       		.byte	0x1
 235 002e 08       		.byte	0x8
 236 002f CC000000 		.4byte	.LASF1
 237 0033 02       		.uleb128 0x2
 238 0034 02       		.byte	0x2
 239 0035 05       		.byte	0x5
 240 0036 A6020000 		.4byte	.LASF2
 241 003a 02       		.uleb128 0x2
 242 003b 02       		.byte	0x2
 243 003c 07       		.byte	0x7
 244 003d EC000000 		.4byte	.LASF3
 245 0041 02       		.uleb128 0x2
 246 0042 04       		.byte	0x4
 247 0043 05       		.byte	0x5
 248 0044 B6020000 		.4byte	.LASF4
 249 0048 02       		.uleb128 0x2
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 9


 250 0049 04       		.byte	0x4
 251 004a 07       		.byte	0x7
 252 004b DA000000 		.4byte	.LASF5
 253 004f 02       		.uleb128 0x2
 254 0050 08       		.byte	0x8
 255 0051 05       		.byte	0x5
 256 0052 00000000 		.4byte	.LASF6
 257 0056 02       		.uleb128 0x2
 258 0057 08       		.byte	0x8
 259 0058 07       		.byte	0x7
 260 0059 CF010000 		.4byte	.LASF7
 261 005d 03       		.uleb128 0x3
 262 005e 04       		.byte	0x4
 263 005f 05       		.byte	0x5
 264 0060 696E7400 		.ascii	"int\000"
 265 0064 02       		.uleb128 0x2
 266 0065 04       		.byte	0x4
 267 0066 07       		.byte	0x7
 268 0067 C2010000 		.4byte	.LASF8
 269 006b 04       		.uleb128 0x4
 270 006c B0020000 		.4byte	.LASF9
 271 0070 02       		.byte	0x2
 272 0071 E401     		.2byte	0x1e4
 273 0073 2C000000 		.4byte	0x2c
 274 0077 04       		.uleb128 0x4
 275 0078 B4010000 		.4byte	.LASF10
 276 007c 02       		.byte	0x2
 277 007d E501     		.2byte	0x1e5
 278 007f 3A000000 		.4byte	0x3a
 279 0083 04       		.uleb128 0x4
 280 0084 BB010000 		.4byte	.LASF11
 281 0088 02       		.byte	0x2
 282 0089 E601     		.2byte	0x1e6
 283 008b 48000000 		.4byte	0x48
 284 008f 02       		.uleb128 0x2
 285 0090 04       		.byte	0x4
 286 0091 04       		.byte	0x4
 287 0092 80000000 		.4byte	.LASF12
 288 0096 02       		.uleb128 0x2
 289 0097 08       		.byte	0x8
 290 0098 04       		.byte	0x4
 291 0099 98010000 		.4byte	.LASF13
 292 009d 02       		.uleb128 0x2
 293 009e 01       		.byte	0x1
 294 009f 08       		.byte	0x8
 295 00a0 84020000 		.4byte	.LASF14
 296 00a4 04       		.uleb128 0x4
 297 00a5 0E000000 		.4byte	.LASF15
 298 00a9 02       		.byte	0x2
 299 00aa 9002     		.2byte	0x290
 300 00ac B0000000 		.4byte	0xb0
 301 00b0 05       		.uleb128 0x5
 302 00b1 83000000 		.4byte	0x83
 303 00b5 06       		.uleb128 0x6
 304 00b6 89020000 		.4byte	.LASF16
 305 00ba 01       		.byte	0x1
 306 00bb 46       		.byte	0x46
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 10


 307 00bc 00000000 		.4byte	.LFB0
 308 00c0 1C000000 		.4byte	.LFE0-.LFB0
 309 00c4 01       		.uleb128 0x1
 310 00c5 9C       		.byte	0x9c
 311 00c6 06       		.uleb128 0x6
 312 00c7 86000000 		.4byte	.LASF17
 313 00cb 01       		.byte	0x1
 314 00cc 5F       		.byte	0x5f
 315 00cd 00000000 		.4byte	.LFB1
 316 00d1 1C000000 		.4byte	.LFE1-.LFB1
 317 00d5 01       		.uleb128 0x1
 318 00d6 9C       		.byte	0x9c
 319 00d7 07       		.uleb128 0x7
 320 00d8 1C000000 		.4byte	.LASF27
 321 00dc 01       		.byte	0x1
 322 00dd 86       		.byte	0x86
 323 00de 00000000 		.4byte	.LFB2
 324 00e2 38000000 		.4byte	.LFE2-.LFB2
 325 00e6 01       		.uleb128 0x1
 326 00e7 9C       		.byte	0x9c
 327 00e8 25010000 		.4byte	0x125
 328 00ec 08       		.uleb128 0x8
 329 00ed 8D010000 		.4byte	.LASF18
 330 00f1 01       		.byte	0x1
 331 00f2 86       		.byte	0x86
 332 00f3 77000000 		.4byte	0x77
 333 00f7 02       		.uleb128 0x2
 334 00f8 91       		.byte	0x91
 335 00f9 6E       		.sleb128 -18
 336 00fa 08       		.uleb128 0x8
 337 00fb A6010000 		.4byte	.LASF19
 338 00ff 01       		.byte	0x1
 339 0100 86       		.byte	0x86
 340 0101 6B000000 		.4byte	0x6b
 341 0105 02       		.uleb128 0x2
 342 0106 91       		.byte	0x91
 343 0107 6D       		.sleb128 -19
 344 0108 09       		.uleb128 0x9
 345 0109 14000000 		.4byte	.LASF20
 346 010d 01       		.byte	0x1
 347 010e 88       		.byte	0x88
 348 010f 83000000 		.4byte	0x83
 349 0113 02       		.uleb128 0x2
 350 0114 91       		.byte	0x91
 351 0115 74       		.sleb128 -12
 352 0116 09       		.uleb128 0x9
 353 0117 9F010000 		.4byte	.LASF21
 354 011b 01       		.byte	0x1
 355 011c 89       		.byte	0x89
 356 011d 83000000 		.4byte	0x83
 357 0121 02       		.uleb128 0x2
 358 0122 91       		.byte	0x91
 359 0123 70       		.sleb128 -16
 360 0124 00       		.byte	0
 361 0125 0A       		.uleb128 0xa
 362 0126 A2000000 		.4byte	.LASF22
 363 012a 01       		.byte	0x1
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 11


 364 012b B0       		.byte	0xb0
 365 012c 77000000 		.4byte	0x77
 366 0130 00000000 		.4byte	.LFB3
 367 0134 14000000 		.4byte	.LFE3-.LFB3
 368 0138 01       		.uleb128 0x1
 369 0139 9C       		.byte	0x9c
 370 013a 0A       		.uleb128 0xa
 371 013b CB020000 		.4byte	.LASF23
 372 013f 01       		.byte	0x1
 373 0140 C6       		.byte	0xc6
 374 0141 6B000000 		.4byte	0x6b
 375 0145 00000000 		.4byte	.LFB4
 376 0149 0C000000 		.4byte	.LFE4-.LFB4
 377 014d 01       		.uleb128 0x1
 378 014e 9C       		.byte	0x9c
 379 014f 00       		.byte	0
 380              		.section	.debug_abbrev,"",%progbits
 381              	.Ldebug_abbrev0:
 382 0000 01       		.uleb128 0x1
 383 0001 11       		.uleb128 0x11
 384 0002 01       		.byte	0x1
 385 0003 25       		.uleb128 0x25
 386 0004 0E       		.uleb128 0xe
 387 0005 13       		.uleb128 0x13
 388 0006 0B       		.uleb128 0xb
 389 0007 03       		.uleb128 0x3
 390 0008 0E       		.uleb128 0xe
 391 0009 1B       		.uleb128 0x1b
 392 000a 0E       		.uleb128 0xe
 393 000b 55       		.uleb128 0x55
 394 000c 17       		.uleb128 0x17
 395 000d 11       		.uleb128 0x11
 396 000e 01       		.uleb128 0x1
 397 000f 10       		.uleb128 0x10
 398 0010 17       		.uleb128 0x17
 399 0011 00       		.byte	0
 400 0012 00       		.byte	0
 401 0013 02       		.uleb128 0x2
 402 0014 24       		.uleb128 0x24
 403 0015 00       		.byte	0
 404 0016 0B       		.uleb128 0xb
 405 0017 0B       		.uleb128 0xb
 406 0018 3E       		.uleb128 0x3e
 407 0019 0B       		.uleb128 0xb
 408 001a 03       		.uleb128 0x3
 409 001b 0E       		.uleb128 0xe
 410 001c 00       		.byte	0
 411 001d 00       		.byte	0
 412 001e 03       		.uleb128 0x3
 413 001f 24       		.uleb128 0x24
 414 0020 00       		.byte	0
 415 0021 0B       		.uleb128 0xb
 416 0022 0B       		.uleb128 0xb
 417 0023 3E       		.uleb128 0x3e
 418 0024 0B       		.uleb128 0xb
 419 0025 03       		.uleb128 0x3
 420 0026 08       		.uleb128 0x8
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 12


 421 0027 00       		.byte	0
 422 0028 00       		.byte	0
 423 0029 04       		.uleb128 0x4
 424 002a 16       		.uleb128 0x16
 425 002b 00       		.byte	0
 426 002c 03       		.uleb128 0x3
 427 002d 0E       		.uleb128 0xe
 428 002e 3A       		.uleb128 0x3a
 429 002f 0B       		.uleb128 0xb
 430 0030 3B       		.uleb128 0x3b
 431 0031 05       		.uleb128 0x5
 432 0032 49       		.uleb128 0x49
 433 0033 13       		.uleb128 0x13
 434 0034 00       		.byte	0
 435 0035 00       		.byte	0
 436 0036 05       		.uleb128 0x5
 437 0037 35       		.uleb128 0x35
 438 0038 00       		.byte	0
 439 0039 49       		.uleb128 0x49
 440 003a 13       		.uleb128 0x13
 441 003b 00       		.byte	0
 442 003c 00       		.byte	0
 443 003d 06       		.uleb128 0x6
 444 003e 2E       		.uleb128 0x2e
 445 003f 00       		.byte	0
 446 0040 3F       		.uleb128 0x3f
 447 0041 19       		.uleb128 0x19
 448 0042 03       		.uleb128 0x3
 449 0043 0E       		.uleb128 0xe
 450 0044 3A       		.uleb128 0x3a
 451 0045 0B       		.uleb128 0xb
 452 0046 3B       		.uleb128 0x3b
 453 0047 0B       		.uleb128 0xb
 454 0048 27       		.uleb128 0x27
 455 0049 19       		.uleb128 0x19
 456 004a 11       		.uleb128 0x11
 457 004b 01       		.uleb128 0x1
 458 004c 12       		.uleb128 0x12
 459 004d 06       		.uleb128 0x6
 460 004e 40       		.uleb128 0x40
 461 004f 18       		.uleb128 0x18
 462 0050 9742     		.uleb128 0x2117
 463 0052 19       		.uleb128 0x19
 464 0053 00       		.byte	0
 465 0054 00       		.byte	0
 466 0055 07       		.uleb128 0x7
 467 0056 2E       		.uleb128 0x2e
 468 0057 01       		.byte	0x1
 469 0058 3F       		.uleb128 0x3f
 470 0059 19       		.uleb128 0x19
 471 005a 03       		.uleb128 0x3
 472 005b 0E       		.uleb128 0xe
 473 005c 3A       		.uleb128 0x3a
 474 005d 0B       		.uleb128 0xb
 475 005e 3B       		.uleb128 0x3b
 476 005f 0B       		.uleb128 0xb
 477 0060 27       		.uleb128 0x27
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 13


 478 0061 19       		.uleb128 0x19
 479 0062 11       		.uleb128 0x11
 480 0063 01       		.uleb128 0x1
 481 0064 12       		.uleb128 0x12
 482 0065 06       		.uleb128 0x6
 483 0066 40       		.uleb128 0x40
 484 0067 18       		.uleb128 0x18
 485 0068 9742     		.uleb128 0x2117
 486 006a 19       		.uleb128 0x19
 487 006b 01       		.uleb128 0x1
 488 006c 13       		.uleb128 0x13
 489 006d 00       		.byte	0
 490 006e 00       		.byte	0
 491 006f 08       		.uleb128 0x8
 492 0070 05       		.uleb128 0x5
 493 0071 00       		.byte	0
 494 0072 03       		.uleb128 0x3
 495 0073 0E       		.uleb128 0xe
 496 0074 3A       		.uleb128 0x3a
 497 0075 0B       		.uleb128 0xb
 498 0076 3B       		.uleb128 0x3b
 499 0077 0B       		.uleb128 0xb
 500 0078 49       		.uleb128 0x49
 501 0079 13       		.uleb128 0x13
 502 007a 02       		.uleb128 0x2
 503 007b 18       		.uleb128 0x18
 504 007c 00       		.byte	0
 505 007d 00       		.byte	0
 506 007e 09       		.uleb128 0x9
 507 007f 34       		.uleb128 0x34
 508 0080 00       		.byte	0
 509 0081 03       		.uleb128 0x3
 510 0082 0E       		.uleb128 0xe
 511 0083 3A       		.uleb128 0x3a
 512 0084 0B       		.uleb128 0xb
 513 0085 3B       		.uleb128 0x3b
 514 0086 0B       		.uleb128 0xb
 515 0087 49       		.uleb128 0x49
 516 0088 13       		.uleb128 0x13
 517 0089 02       		.uleb128 0x2
 518 008a 18       		.uleb128 0x18
 519 008b 00       		.byte	0
 520 008c 00       		.byte	0
 521 008d 0A       		.uleb128 0xa
 522 008e 2E       		.uleb128 0x2e
 523 008f 00       		.byte	0
 524 0090 3F       		.uleb128 0x3f
 525 0091 19       		.uleb128 0x19
 526 0092 03       		.uleb128 0x3
 527 0093 0E       		.uleb128 0xe
 528 0094 3A       		.uleb128 0x3a
 529 0095 0B       		.uleb128 0xb
 530 0096 3B       		.uleb128 0x3b
 531 0097 0B       		.uleb128 0xb
 532 0098 27       		.uleb128 0x27
 533 0099 19       		.uleb128 0x19
 534 009a 49       		.uleb128 0x49
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 14


 535 009b 13       		.uleb128 0x13
 536 009c 11       		.uleb128 0x11
 537 009d 01       		.uleb128 0x1
 538 009e 12       		.uleb128 0x12
 539 009f 06       		.uleb128 0x6
 540 00a0 40       		.uleb128 0x40
 541 00a1 18       		.uleb128 0x18
 542 00a2 9742     		.uleb128 0x2117
 543 00a4 19       		.uleb128 0x19
 544 00a5 00       		.byte	0
 545 00a6 00       		.byte	0
 546 00a7 00       		.byte	0
 547              		.section	.debug_aranges,"",%progbits
 548 0000 3C000000 		.4byte	0x3c
 549 0004 0200     		.2byte	0x2
 550 0006 00000000 		.4byte	.Ldebug_info0
 551 000a 04       		.byte	0x4
 552 000b 00       		.byte	0
 553 000c 0000     		.2byte	0
 554 000e 0000     		.2byte	0
 555 0010 00000000 		.4byte	.LFB0
 556 0014 1C000000 		.4byte	.LFE0-.LFB0
 557 0018 00000000 		.4byte	.LFB1
 558 001c 1C000000 		.4byte	.LFE1-.LFB1
 559 0020 00000000 		.4byte	.LFB2
 560 0024 38000000 		.4byte	.LFE2-.LFB2
 561 0028 00000000 		.4byte	.LFB3
 562 002c 14000000 		.4byte	.LFE3-.LFB3
 563 0030 00000000 		.4byte	.LFB4
 564 0034 0C000000 		.4byte	.LFE4-.LFB4
 565 0038 00000000 		.4byte	0
 566 003c 00000000 		.4byte	0
 567              		.section	.debug_ranges,"",%progbits
 568              	.Ldebug_ranges0:
 569 0000 00000000 		.4byte	.LFB0
 570 0004 1C000000 		.4byte	.LFE0
 571 0008 00000000 		.4byte	.LFB1
 572 000c 1C000000 		.4byte	.LFE1
 573 0010 00000000 		.4byte	.LFB2
 574 0014 38000000 		.4byte	.LFE2
 575 0018 00000000 		.4byte	.LFB3
 576 001c 14000000 		.4byte	.LFE3
 577 0020 00000000 		.4byte	.LFB4
 578 0024 0C000000 		.4byte	.LFE4
 579 0028 00000000 		.4byte	0
 580 002c 00000000 		.4byte	0
 581              		.section	.debug_line,"",%progbits
 582              	.Ldebug_line0:
 583 0000 B9000000 		.section	.debug_str,"MS",%progbits,1
 583      02005300 
 583      00000201 
 583      FB0E0D00 
 583      01010101 
 584              	.LASF6:
 585 0000 6C6F6E67 		.ascii	"long long int\000"
 585      206C6F6E 
 585      6720696E 
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 15


 585      7400
 586              	.LASF15:
 587 000e 72656733 		.ascii	"reg32\000"
 587      3200
 588              	.LASF20:
 589 0014 6D61736B 		.ascii	"maskVal\000"
 589      56616C00 
 590              	.LASF27:
 591 001c 4144435F 		.ascii	"ADC_SAR_Seq_1_intClock_SetFractionalDividerRegister"
 591      5341525F 
 591      5365715F 
 591      315F696E 
 591      74436C6F 
 592 004f 00       		.ascii	"\000"
 593              	.LASF25:
 594 0050 47656E65 		.ascii	"Generated_Source\\PSoC4\\ADC_SAR_Seq_1_intClock.c\000"
 594      72617465 
 594      645F536F 
 594      75726365 
 594      5C50536F 
 595              	.LASF12:
 596 0080 666C6F61 		.ascii	"float\000"
 596      7400
 597              	.LASF17:
 598 0086 4144435F 		.ascii	"ADC_SAR_Seq_1_intClock_Stop\000"
 598      5341525F 
 598      5365715F 
 598      315F696E 
 598      74436C6F 
 599              	.LASF22:
 600 00a2 4144435F 		.ascii	"ADC_SAR_Seq_1_intClock_GetDividerRegister\000"
 600      5341525F 
 600      5365715F 
 600      315F696E 
 600      74436C6F 
 601              	.LASF1:
 602 00cc 756E7369 		.ascii	"unsigned char\000"
 602      676E6564 
 602      20636861 
 602      7200
 603              	.LASF5:
 604 00da 6C6F6E67 		.ascii	"long unsigned int\000"
 604      20756E73 
 604      69676E65 
 604      6420696E 
 604      7400
 605              	.LASF3:
 606 00ec 73686F72 		.ascii	"short unsigned int\000"
 606      7420756E 
 606      7369676E 
 606      65642069 
 606      6E7400
 607              	.LASF24:
 608 00ff 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 608      43313120 
 608      352E342E 
 608      31203230 
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 16


 608      31363036 
 609 0132 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 609      20726576 
 609      6973696F 
 609      6E203233 
 609      37373135 
 610 0165 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 610      66756E63 
 610      74696F6E 
 610      2D736563 
 610      74696F6E 
 611              	.LASF18:
 612 018d 636C6B44 		.ascii	"clkDivider\000"
 612      69766964 
 612      657200
 613              	.LASF13:
 614 0198 646F7562 		.ascii	"double\000"
 614      6C6500
 615              	.LASF21:
 616 019f 72656756 		.ascii	"regVal\000"
 616      616C00
 617              	.LASF19:
 618 01a6 636C6B46 		.ascii	"clkFractional\000"
 618      72616374 
 618      696F6E61 
 618      6C00
 619              	.LASF10:
 620 01b4 75696E74 		.ascii	"uint16\000"
 620      313600
 621              	.LASF11:
 622 01bb 75696E74 		.ascii	"uint32\000"
 622      333200
 623              	.LASF8:
 624 01c2 756E7369 		.ascii	"unsigned int\000"
 624      676E6564 
 624      20696E74 
 624      00
 625              	.LASF7:
 626 01cf 6C6F6E67 		.ascii	"long long unsigned int\000"
 626      206C6F6E 
 626      6720756E 
 626      7369676E 
 626      65642069 
 627              	.LASF26:
 628 01e6 433A5C55 		.ascii	"C:\\Users\\IlyR\\OneDrive - The University of Manch"
 628      73657273 
 628      5C496C79 
 628      525C4F6E 
 628      65447269 
 629 0216 65737465 		.ascii	"ester\\EEE MTE SEM2\\3YP\\control\\speed_control_v1"
 629      725C4545 
 629      45204D54 
 629      45205345 
 629      4D325C33 
 630 0245 5C53656E 		.ascii	"\\Sensored BLDC Motor Control\\Sensored BLDC Motor "
 630      736F7265 
 630      6420424C 
ARM GAS  C:\Users\IlyR\AppData\Local\Temp\ccRi11Od.s 			page 17


 630      4443204D 
 630      6F746F72 
 631 0276 436F6E74 		.ascii	"Control.cydsn\000"
 631      726F6C2E 
 631      63796473 
 631      6E00
 632              	.LASF14:
 633 0284 63686172 		.ascii	"char\000"
 633      00
 634              	.LASF16:
 635 0289 4144435F 		.ascii	"ADC_SAR_Seq_1_intClock_Start\000"
 635      5341525F 
 635      5365715F 
 635      315F696E 
 635      74436C6F 
 636              	.LASF2:
 637 02a6 73686F72 		.ascii	"short int\000"
 637      7420696E 
 637      7400
 638              	.LASF9:
 639 02b0 75696E74 		.ascii	"uint8\000"
 639      3800
 640              	.LASF4:
 641 02b6 6C6F6E67 		.ascii	"long int\000"
 641      20696E74 
 641      00
 642              	.LASF0:
 643 02bf 7369676E 		.ascii	"signed char\000"
 643      65642063 
 643      68617200 
 644              	.LASF23:
 645 02cb 4144435F 		.ascii	"ADC_SAR_Seq_1_intClock_GetFractionalDividerRegister"
 645      5341525F 
 645      5365715F 
 645      315F696E 
 645      74436C6F 
 646 02fe 00       		.ascii	"\000"
 647              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
